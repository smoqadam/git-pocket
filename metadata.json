{
  "2025-06-29-1618-solvingpassportapplicationwithhaskell": {
    "title": "Solving `Passport Application` with Haskell",
    "url": "https://jameshaydon.github.io/passport/",
    "url_hash": "60017c5a",
    "date": "2025-06-29T16:18:09.841122",
    "authors": [],
    "content_html": "<html><body><div><div itemprop=\"articleBody\">\n<p>(Comments on <a href=\"https://news.ycombinator.com/item?id=44408872\">HackerNews</a> and <a href=\"https://www.reddit.com/r/haskell/comments/1lmzvus/solving_uk_passport_application_with_haskell/\">Reddit</a>)</p>\n<p>There's a trend at the moment of <a href=\"https://news.ycombinator.com/item?id=44363696\">solving</a> online <a href=\"https://news.ycombinator.com/item?id=44273489\">games</a> with <a href=\"https://news.ycombinator.com/item?id=44259476\">programming</a>, let's do one from the UK called <em>Passport Application</em>, which is developed by <a href=\"https://www.gov.uk/government/organisations/hm-passport-office\">\"His Majesty's Passport Office\"</a> or HMPO. It's a cultural phenomenon in the UK: despite being quite expensive (about £100 just to start) for the standard online version (a masterpiece of minimalist design, entirely text-based), most British play the game, and do so every 10 years or so.</p>\n<p>It's an adventure puzzle document collection game. The premise is to collect enough artefacts, scattered throughout various bureaucratic institutions, until you can prove the statement \"Applicant is British\" according to an extremely complex set of rules, written in arcane language, in various texts called \"acts of parliament\". The prize for winning is a little booklet with a date inside that indicates when you can play again.</p>\n<span id=\"continue-reading\"></span>\n<p>Hardcore players opt for an entirely paper-based version that relies entirely on postal mail. The puzzle-sheets for that look like this:</p>\n<img alt=\"UK Passport Application paper form\" src=\"https://jameshaydon.github.io/passport/paper-form.png\"/>\n<p>There are various instructions for what collectibles need to be gathered, presented in game instruction manuals such as:</p>\n<p><img alt=\"Documents Table\" src=\"https://jameshaydon.github.io/passport/docs-table.jpg\" title=\"Documents Table\"/></p>\n<p>The game starts easy enough, you just need to enter basic facts about the applicant, and take a photo of them. But things get tougher from there, with various side-quests, all designed to be fun:</p>\n<ul>\n<li>HMPO sometimes decides to send you on an \"identity confirmation\" side quest. This involves finding someone whose job/status is one of a finite list, things like \"accountant\" or \"civil servant\", but they also have some fun ones like \"chiropodist\", \"funeral director\" and \"airline pilot\". Once you've managed to track down such a person, preferably one who knows you, you must socially engineer them into filling in some webforms.</li>\n<li>The main mechanic of the game involves sending in \"original\" documents. Documents that are not in english need to be paired with an \"officially certified translation\", which triggered some cool side-quests in my case like \"how to get a certified translation of a French marriage certificate, which is in my possession in Japan, and have both sent to HMPO by mail\".</li>\n<li>Some documents relate to family members, and so you need to start getting the whole family involved in a co-op mode.</li>\n<li>And of course the bureaucratic institutions you must request some documents from have their own arcane gameplay.</li>\n</ul>\n<p>All this keeps the game interesting and fun, taking weeks and sometimes months to complete. Non-British people aren't <em>really</em> supposed to play, but seeing as proving Britishness is the whole object of the game, it's actually open to anyone! I thoroughly encourage you to give it a go.</p>\n<p>So this time I was playing on behalf of my daughter, because I'd already completed the game recently, and besides she's too young to play on her own. I played online and chose the \"first child passport born abroad\" difficulty level, so expected it to be quite challenging from the outset. After a round of waiting, the first round of document requests came through.\nQuite a lot of documents, most of which seemed quite unrelated to the main objective, but that's the game. I started collecting them but some were quite difficult to obtain so I decided to use the chat feature. You see your game is handled by a person called an \"examiner\", they are the ones who send you on document gathering quests, according to their interpretation of the rules. To add an extra layer of difficulty, you can't directly communicate with this person, you can only talk to \"advice agents\" using a chat or telephone service. These agents offer advice on side-quests, but nothing they say is official. They can pass along questions to the examiner, but that triggers a few days of waiting time, sometimes up to 10 days in my case, a tactic used to build suspense.</p>\n<p>Quite quickly the chat service told me that 50% of the initial documents requested were unnecessary; it was all just a misdirection! So another round of waiting, and then more document requests. You get document requests via emails like this:</p>\n<img alt=\"Document Request\" src=\"https://jameshaydon.github.io/passport/doc-request-email.png\"/>\n<p>The document requests are paired with some cryptic explanations that are somewhat helpful but still vague enough to keep the game interesting. Why don't I have parental responsibility for <code>__APPLICANT_NAME__</code>? One of the listed conditions is \"named on the child's birth certificate\", which I am, and was already sent to them, along with the Japanese→English translation. Maybe they also need proof of the first condition, despite the second, and despite this document not having been requested earlier in the process. In any case I can't satisfy the third. Or maybe some automated system has messed up; the broken HTML templating indicates that maybe <code>APPLICANT_NAME == NULL</code> in some database, who knows.</p>\n<p>Another round of document requests, one for a document that doesn't exist, another round of helpline. More explorations of conversation trees with NPCs, an alternative path to the goal is found, more documents. This culminated in a rare relic request:</p>\n<blockquote>\n<p>Applicant's Paternal great-grandfather's birth certificate and marriage certificate</p>\n</blockquote>\n<p>One of these documents is almost 100 years old! Of course <code>applicant's Paternal great grandfather</code> is ambiguous, since most people have 2 of them, but this is standard misdirection at this point and all part of the fun. After decrypting this to <code>applicant's father's father's father's birth certificate</code> I started to wonder why such a distant document would be requested. Engaging the advice agents didn't help much, one launched into explanations as to why\n$$\\text{birthCirt}(\\text{father}^2(\\text{applicant}))$$ was needed even though this document was already in their possession, and I was asking about\n$$\\text{birthCirt}(\\text{father}^3(\\text{applicant}))$$, then admitted they couldn't quite say why the was needed.</p>\n<p>So what's going on here? It's important to understand the sort of logic used by HMPO in the <em>Passport Application</em> game. It's called <strong>Bureaucratic Logic</strong>, it derives from <a href=\"https://en.wikipedia.org/wiki/Constructive_logic\">Constructive Logic</a>, in that one cannot just make valid arguments, that would be too easy, one has to construct proofs of a particular nature to back them up. Constructive logic has witnesses, Bureaucratic logic has original documents.</p>\n<p>For example, like constructive logic, HMPO doesn't allow you to use excluded middle: $P \\lor \\lnot P$ ($P$ or not $P$) is not in general valid. The gameplay is greatly influenced by answers to questions such as \"was applicant's father's father born in the UK or not born in the UK?\" But you can't just say \"yes one of those is true\" and then provide documents for both resulting scenarios. That would be using excluded middle. You <em>must</em> commit to one alternative <em>and</em> provide a document for that. This is were it's important to remember that it's not about actually demonstrating citizenship, for which excluded middle would be a perfectly valid argument, <em>Passport Application</em> is about having fun gathering documents. Don't question the rules too much or you'll stop having fun.</p>\n<p>The second piece of the puzzle is in the guidance that accompanies the document requests:</p>\n<blockquote>\n<p>British passports are issued to those who have a claim to British nationality under the British Nationality Act 1981. This is decided mainly by a person’s place and date of birth and their parents’ places and dates of birth. A person born outside of the UK after 31 December 1982 is normally a British citizen only if, at the time of their birth one parent is a British citizen otherwise than by descent, such as through birth in the UK or registration or naturalisation as a British citizen.</p>\n</blockquote>\n<p>Note that the Britishness of a person can be dependent on the Britishness of their parents. The final piece of the puzzle is that HMPO doesn't trust its own passports records to prove Britishness. This is the mechanic which, in some cases, kicks off <em>recursive</em> document requests up the family tree, until a base case is reached. What are the base cases? A base case is an ancestor whose Britishness <em>does not</em> depend on a parent, e.g. someone who was naturalised, or born in the UK before 1983 (which makes one unconditionally british regardless of parents). That's right, further into the future we get from 1983, the taller these call-stacks can get. Fun!</p>\n<p>This is how the request chain pertaining to this document played out in my case (in parallel to other requests), quotes are from HMPO emails:</p>\n<p>Note that the recursion is playing out via email.</p>\n<p>At this point I did what any sane person would do, I reached for a logic programming language and decided to encode the rules in the hope of figuring out what was going on. Is it possible to write some code which could have produced the full list of required documents upfront, with no confusion, and perfect explanations? Of course this would ruin all the fun of the game, which is why HMPO doesn't do it, but let's forge ahead.</p>\n<h2 id=\"haskell-code\">Haskell code</h2>\n<p>(Full code is on <a href=\"https://github.com/jameshaydon/uk-passport/blob/main/src/Lib.hs\">GitHub</a>.)</p>\n<p>At first I started encoding the rules in Prolog, but switched to Haskell's <code>LogicT</code> monad after a while. The basic goal here is to produce the full list of documents required for the application. But this isn't quite right: because there are several ways one can claim Britishness, there are several sets of documents that can work, and you only need one of them. So really one is looking for a function that returns <code>Set (Set Document)</code>, where</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>data </span><span>Parent </span><span>= </span><span>Mother </span><span>| </span><span>Father\n</span><span>  </span><span>deriving</span><span> (</span><span>Show</span><span>, </span><span>Eq</span><span>, </span><span>Ord</span><span>)\n</span><span>\n</span><span>data </span><span>Person </span><span>= </span><span>Applicant </span><span>| </span><span>Parent Parent Person\n</span><span>  </span><span>deriving</span><span> (</span><span>Show</span><span>, </span><span>Eq</span><span>, </span><span>Ord</span><span>)\n</span><span>  \n</span><span>data </span><span>Document\n</span><span>  </span><span>= </span><span>BirthCertificate Person\n</span><span>  </span><span>| </span><span>MarriageCertificate Person Person\n</span><span>  </span><span>| </span><span>NaturalizationCertificate Person\n</span><span>  </span><span>| </span><span>Passport Person\n</span><span>  </span><span>-- more documents\n</span><span>  </span><span>deriving</span><span> (</span><span>Show</span><span>, </span><span>Eq</span><span>, </span><span>Ord</span><span>)\n</span></code></pre>\n<p>But this is also unsatisfying, because you want to know <em>why</em> a certain document set is enough. So this is really a proof-search problem, and we proceed in two stages:</p>\n<ul>\n<li>we use <code>LogicT</code> to enumerate all the <code>Proof</code>s of Britishness for the applicant, given some information about them, and</li>\n<li>for each <code>Proof</code> we compute the <code>Set (Set Document)</code> that is needed to satisfy that proof.</li>\n</ul>\n<p>This two-staged approach is what made me switch to Haskell, though I'm sure someone more experienced with Prolog would have made it work.</p>\n<p>So we define a simple proof type:</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>data </span><span>Proof\n</span><span>  </span><span>= </span><span>-- Deriving britishness via a parent, and their proof of britishness\n</span><span>    </span><span>ViaParent Person Proof\n</span><span>  </span><span>| </span><span>-- Britishness via two claims.\n</span><span>    </span><span>And Proof Proof\n</span><span>  </span><span>| </span><span>-- Foundational evidence.\n</span><span>    </span><span>Evidence Predicate\n</span><span>  </span><span>deriving</span><span> (</span><span>Show</span><span>)\n</span></code></pre>\n<p>This type could be made much more complex, detailing each rule that was used, but this simpler type was at least enough for my purposes. One feature I wanted was that one would not need to provide all the information upfront, instead questions would be asked interactively, and only if needed. Furthermore, previous facts should be retained and used for all branches, backtracking, etc. So we need <code>IO</code> and <code>State</code>, and we want the state to be global across all branches:</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>data </span><span>Knowledge </span><span>= </span><span>SureYes </span><span>| </span><span>SureNo </span><span>| </span><span>Unsure\n</span><span>  </span><span>deriving</span><span> (</span><span>Eq</span><span>)\n</span><span>\n</span><span>type </span><span>Claims </span><span>= </span><span>Map Predicate Knowledge\n</span><span>\n</span><span>type </span><span>M</span><span> a </span><span>= </span><span>StateT Claims</span><span> (</span><span>LogicT IO</span><span>) a\n</span></code></pre>\n<p>Here <code>Predicate</code>s are the sorts of things that are true of a person and affect how the rules of the game play out:</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>data </span><span>Predicate\n</span><span>  </span><span>= </span><span>IsBritish Person\n</span><span>  </span><span>| </span><span>Settled Person\n</span><span>  </span><span>| </span><span>BornBefore Int Person\n</span><span>  </span><span>| </span><span>BornInUK Person\n</span><span>  </span><span>| </span><span>BornAfter Int Person\n</span><span>  </span><span>| </span><span>Naturalized Person\n</span><span>  </span><span>| </span><span>Years3LivingInUK Person\n</span><span>  </span><span>| </span><span>IsBritOtbd Person\n</span><span>  </span><span>| </span><span>Married Person Person\n</span><span>  </span><span>deriving</span><span> (</span><span>Show</span><span>, </span><span>Eq</span><span>, </span><span>Ord</span><span>)\n</span></code></pre>\n<p>Here is then the root function for Britishness:</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>-- | Is a person british?\n</span><span>brit </span><span>:: Person -&gt; M Proof\n</span><span>brit p </span><span>=\n</span><span>  </span><span>do\n</span><span>    check (</span><span>IsBritish</span><span> p)\n</span><span>    byBirth </span><span>&lt;|&gt;</span><span> naturalised\n</span><span>  </span><span>where\n</span><span>    byBirth </span><span>=\n</span><span>      ifThenElse\n</span><span>        (evidence (</span><span>BornInUK</span><span> p))\n</span><span>        (britBornInUk p)\n</span><span>        (britBornAbroad p)\n</span><span>    naturalised </span><span>=</span><span> evidence (</span><span>Naturalised</span><span> p)\n</span></code></pre>\n<p>The <code>check</code> function here interacts with the user, to avoid launching into an investigation if the user knows that person is not british:</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>-- | Ask about a predicate, failing if the answer is a sure no.\n</span><span>check </span><span>:: Predicate -&gt; M </span><span>()\n</span><span>check q </span><span>= </span><span>do\n</span><span>  answer </span><span>&lt;-</span><span> question q\n</span><span>  guard (answer </span><span>/= </span><span>SureNo</span><span>)\n</span></code></pre>\n<p>A person is <code>brit</code> either <code>byBirth</code> or <code>naturalised</code>. Naturalisation is the simplest, as a single certificate is then the sole document needed. Britishness by birth forks mainly on whether or not the person was born in the UK, and we go to sub-routines:</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>-- | UK-born citizenship (pre-1983 or via parent)\n</span><span>britBornInUk </span><span>:: Person -&gt; M Proof\n</span><span>britBornInUk p </span><span>=</span><span> evidence (</span><span>BornBefore 1983</span><span> p) </span><span>`</span><span>orElse</span><span>`</span><span> britBornInUkViaParent p\n</span><span>\n</span><span>-- | UK-born citizenship via parent (used for post-1983 births)\n</span><span>britBornInUkViaParent </span><span>:: Person -&gt; M Proof\n</span><span>britBornInUkViaParent p </span><span>=</span><span> viaParent p (</span><span>\\</span><span>parent </span><span>-&gt;</span><span> brit parent </span><span>`</span><span>orElse</span><span>`</span><span> settled parent)\n</span></code></pre>\n<p>People born in the UK before <code>1983</code> are a base case, they are unconditionally British. Otherwise they acquire it via at least one their parents, who must be either British themselves or \"settled\" at time of birth. The <code>orElse</code> function here is similar to <code>&lt;|&gt;</code>, but doesn't include proofs from the second branch at all if the first is successful (<code>&lt;|&gt;</code> always accumulates proofs from both branches). E.g. if <code>brit parent</code> is true then <code>settled parent</code> doesn't apply: there is no notion of \"settled in the UK\" for British people.</p>\n<p>When not born in the UK things are more complex:</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>-- | British citizenship for those born abroad\n</span><span>britBornAbroad </span><span>:: Person -&gt; M Proof\n</span><span>britBornAbroad p </span><span>=\n</span><span>  viaParent p </span><span>$ \\</span><span>parent </span><span>-&gt;\n</span><span>    britOtbd parent </span><span>`</span><span>orElse</span><span>`</span><span> (brit parent </span><span>`</span><span>and</span><span>`</span><span> evidence (</span><span>Years3LivingInUK</span><span> parent))\n</span><span>\n</span><span>-- | British otherwise than by descent (BOTD)\n</span><span>britOtbd </span><span>:: Person -&gt; M Proof\n</span><span>britOtbd p </span><span>= </span><span>do\n</span><span>  check (</span><span>IsBritOtbd</span><span> p)\n</span><span>  evidence (</span><span>Naturalised</span><span> p) </span><span>`</span><span>orElse</span><span>`</span><span> britOtbdUkBorn </span><span>`</span><span>orElse</span><span>`</span><span> bornCrownService p\n</span><span>  </span><span>where\n</span><span>    britOtbdUkBorn </span><span>=</span><span> evidence (</span><span>BornInUK</span><span> p) </span><span>`</span><span>and</span><span>`</span><span> britBornInUk p\n</span><span>\n</span><span>bornCrownService </span><span>:: Person -&gt; M Proof\n</span><span>bornCrownService p </span><span>=</span><span> viaParent p </span><span>$ \\</span><span>parent </span><span>-&gt; </span><span>do\n</span><span>  check (</span><span>CrownService</span><span> parent)\n</span><span>  brit parent </span><span>`</span><span>and</span><span>`</span><span> evidence (</span><span>CrownService</span><span> parent)\n</span></code></pre>\n<p>When not born in the UK, you get citizenship from your parents in the usual way only if there is evidence of 3 years of consecutive living in the UK, or if born from a person that is <em>British otherwise than by descent</em> (BOTBD). This is a person with \"super Britishness\", they can confer citizenship to their children unconditionally (well, apart from having to play hard games of <code>Passport Application</code>). The basic idea is that someone is BOTBD if they didn't become British purely via a parent. E.g. they were naturalised, or born in the UK, etc. There are <em>many</em> edge-cases in the rules, and I've only coded those that are most relevant to my case. One of them is <code>bornCrownService</code>, this says that one is still BOTBD if born abroad <em>because a parent was working in \"Crown Service\"</em>, e.g. in an embassy. This happens to be the case of $\\text{father}^3(\\text{applicant})$ during the birth of $\\text{father}^2(\\text{applicant})$, but is this relevant? We'll have to wait till we've coded enough to run this program.</p>\n<p>A lot of these functions rely on a higher order function <code>viaParent</code>, which mediates how citizenship is passed down to children:</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>viaParent </span><span>:: Person -&gt;</span><span> (</span><span>Person -&gt; M Proof</span><span>) </span><span>-&gt; M Proof\n</span><span>viaParent p cond </span><span>=</span><span> viaMother </span><span>&lt;|&gt;</span><span> viaFather\n</span><span>  </span><span>where\n</span><span>    via parent </span><span>= </span><span>ViaParent</span><span> (</span><span>Parent</span><span> parent p) </span><span>&lt;$&gt;</span><span> cond (</span><span>Parent</span><span> parent p)\n</span><span>    viaMother </span><span>=</span><span> via </span><span>Mother\n</span><span>    viaFather </span><span>=\n</span><span>      ifThenElse\n</span><span>        (evidence (</span><span>BornAfter 2006</span><span> p))\n</span><span>        (via </span><span>Father</span><span>)\n</span><span>        (married (</span><span>Parent Father</span><span> p) (</span><span>Parent Mother</span><span> p) </span><span>`</span><span>and</span><span>`</span><span> via </span><span>Father</span><span>)\n</span></code></pre>\n<p>This takes a person, and a <code>cond</code>ition for a parent, and produces a proof of Britishness for <code>p</code> as long as <code>cond</code> can be proved for one of <code>p</code>'s parents. There is an extra complication here relating to laws surrounding \"illegitimate\" children born before 2006, so an extra check for marriage is required in some cases. There are ways around this not codified here (\"registration\"). There are other sexist clauses too, about only fathers passing on Britishness in some cases, that I also haven't codified here. It's interesting that even though some of these laws no longer apply, they apply <em>historically</em> when trying to work out if an ancestor was british. That's right, to play <code>Passport Application</code> you need to consult laws from many different times!</p>\n<p>To run the code we <code>observeAllT (evalStateT m Map.empty)</code>, the <code>Map.empty</code> indicating we start with no knowledge. Once a proof has been found we use <code>docs :: Proof -&gt; Logic (Set Document)</code> to produce the needed documents for <em>that path</em> to citizenship. This will mostly list out documents for foundational evidence, and e.g. make sure that when <code>ViaParent</code> is used, a birth certificate linking parent and child is produced.</p>\n<p>Let's run it!</p>\n<pre><code><span>ghci&gt; run (brit Applicant)\n</span><span>? : Applicant is british\n</span><span>y\n</span><span>? : Applicant was born in UK\n</span><span>n\n</span><span>? : Applicant's Mother is british otherwise than by descent\n</span><span>n\n</span><span>? : Applicant was born after 2006\n</span><span>y\n</span><span>? : Applicant's Father is british otherwise than by descent\n</span><span>y\n</span><span>? : Applicant's Father was born in UK\n</span><span>y\n</span><span>? : Applicant's Father was born before 1983\n</span><span>n\n</span><span>? : Applicant's Father's Mother is british\n</span><span>n\n</span><span>? : Applicant's Father's Mother was settled at time of birth\n</span><span>y\n</span><span>? : Applicant's Father was born after 2006\n</span><span>n\n</span><span>? : Applicant's Father's Father was married to Applicant's Father's Mother at time of birth\n</span><span>y\n</span><span>? : Applicant's Father's Father is british\n</span><span>...\n</span></code></pre>\n<p>This goes on for quite some questions, 37 in my case. You can answer question like <code>Applicant's Mother is british otherwise than by descent</code> with \"dk\" (don't know), and in this case it will explore the tree for you, the main use is <em>not</em> exploring this branch if you do know it is futile.</p>\n<p>Once all the citizenship proofs are produced, they are printed and possible document sets are produced:</p>\n<pre><code><span>Applicant has 3 proof(s) of britishness:\n</span><span>\n</span><span>-----------\n</span><span>Proof 1:\n</span><span>\n</span><span>• Applicant was born after 2006\n</span><span>• Via Applicant's Father's britishness:\n</span><span>    • Applicant's Father was born in UK\n</span><span>    • Via Applicant's Father's Mother's britishness:\n</span><span>        Applicant's Father's Mother was settled at time of birth\n</span><span>\n</span><span>Possible doc sets:\n</span><span>• - Birth certificate for Applicant,\n</span><span>  - Birth certificate for Applicant's Father,\n</span><span>  - Settled status document for Applicant's Father's Mother\n</span><span>\n</span><span>-----------\n</span><span>Proof 2:\n</span><span>\n</span><span>• Applicant was born after 2006\n</span><span>• Via Applicant's Father's britishness:\n</span><span>    • Applicant's Father was born in UK\n</span><span>    • • Applicant's Father's Father was married to Applicant's Father's Mother at time of birth\n</span><span>      • Via Applicant's Father's Father's britishness:\n</span><span>          Via Applicant's Father's Father's Mother's britishness:\n</span><span>            • Applicant's Father's Father's Mother was born in UK\n</span><span>            • Applicant's Father's Father's Mother was born before 1983\n</span><span>\n</span><span>Possible doc sets:\n</span><span>• - Birth certificate for Applicant,\n</span><span>  - Birth certificate for Applicant's Father's Father's Mother,\n</span><span>  - Birth certificate for Applicant's Father,\n</span><span>  - Birth certificate for Applicant's Father's Father,\n</span><span>  - Marriage certificate for Applicant's Father's Father and Applicant's Father's Mother\n</span><span>\n</span><span>-----------\n</span><span>Proof 3:\n</span><span>\n</span><span>• Applicant was born after 2006\n</span><span>• Via Applicant's Father's britishness:\n</span><span>    • Applicant's Father was born in UK\n</span><span>    • • Applicant's Father's Father was married to Applicant's Father's Mother at time of birth\n</span><span>      • Via Applicant's Father's Father's britishness:\n</span><span>          • Applicant's Father's Father's Father was married to Applicant's Father's Father's Mother at time of birth\n</span><span>          • Via Applicant's Father's Father's Father's britishness:\n</span><span>              • Applicant's Father's Father's Father was born in UK\n</span><span>              • Applicant's Father's Father's Father was born before 1983\n</span><span>\n</span><span>Possible doc sets:\n</span><span>• - Birth certificate for Applicant,\n</span><span>  - Birth certificate for Applicant's Father,\n</span><span>  - Birth certificate for Applicant's Father's Father,\n</span><span>  - Birth certificate for Applicant's Father's Father's Father,\n</span><span>  - Marriage certificate for Applicant's Father's Father and Applicant's Father's Mother,\n</span><span>  - Marriage certificate for Applicant's Father's Father's Father and Applicant's Father's Father's Mother\n</span></code></pre>\n<p>And there it is, in <code>Proof 3</code>:</p>\n<pre><code><span>Birth certificate for Applicant's Father's Father's Father\n</span></code></pre>\n<p>The \"Crown Service\" status of $\\text{father}^3(\\text{applicant})$ caused quite some confusion in my case, because $\\text{father}^2(\\text{applicant})$ was indeed born abroad, causing some amount of recursion. But hilariously the crown service of $\\text{father}^3(\\text{applicant})$ turns out to be totally irrelevant, indeed the BOTBD status of $\\text{father}^1(\\text{applicant})$ is already derived from being born in the UK and simple Britishness of $\\text{father}^2(\\text{applicant})$. But this simple Britishness still needs to be established, so the recursion to $\\text{father}^2(\\text{applicant})$ still occurs. And the marriage certificate is needed too, for the \"legitimacy\" of $\\text{father}^2(\\text{applicant})$; the marital status of my deceased grandparents has suddenly become one of my most important concerns.</p>\n<p>Interestingly, the proof that HMPO has selected for my case is the longest and most complex of the 3, I assume that when there are several choices they send the player down the most complex one, for extra fun. Indeed <code>Proof 1</code> is quite simple, it requires only proving a settled status of one ancestor <em>and that's it</em>. Citizenship via <em>non-british</em> settled ancestors can be much simpler, because these cases are non-recursive. <code>Proof 2</code> is also slightly more optimized, because it relies on <code>Birth certificate for Applicant's Father's Father's Mother</code>, which therefore bypasses the need for a marriage certificate, needed in <code>Proof 3</code> to prove \"legitimacy\" of <code>Applicant's Father's Father</code>.</p>\n<p>Proofs relying on Britishness bottom out when reaching a person born before 1983 in the UK, the further we get from this date, the longer the proofs become. This applies, at least in theory, <em>even when everyone involved is born in the UK</em>. In practice this doesn't happen because HMPO doesn't actually apply the laws as written in the act, they have their own guidance documents, and act using the principle of <a href=\"https://www.gov.uk/government/publications/balance-of-probabilities/balance-of-probabilities-accessible\">balance of probabilities</a>, and there seems to be guidance indicating that for standard applications from the UK for people born in the UK, one can use \"Main Index\" (their internal passport database). So you have to play on \"hard mode\", e.g. birth abroad, which triggers some global \"extra scrutiny\" flag, which prevents the use of \"Main Index\" in <em>all recursive calls</em>.</p>\n<ul>\n<li>\n<p>There are several places where I have used <code>orElse</code>, but <code>&lt;|&gt;</code> could be used instead. As mentioned above, <code>&lt;|&gt;</code> will explore both branches, but <code>orElse</code> only explores the second branch if the first completely fails. In the case of</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>brit parent </span><span>`</span><span>orElse</span><span>`</span><span> settled parent\n</span></code></pre>\n<p>this is completely valid, but in some of the other situations it's not so simple. This one for example:</p>\n<pre><code><span>britOtbd parent `orElse` and (brit parent) (evidence (Years3LivingInUK parent))\n</span></code></pre>\n<p>really could be an <code>&lt;|&gt;</code>, and in my case it makes for much more proofs of citizenship. But it involves an extra level of bureaucratic process (\"Registration\"), so it seems HMPO will try to exhaust <code>britOtbd parent</code> before trying the second branch.</p>\n</li>\n<li>\n<p>Some things are not tracked carefully enough, for example there are something which have to be true <em>at</em> certain times, e.g. some people need to be married or settled specifically at the time some other person was born. But this wouldn't be hard to do.</p>\n</li>\n<li>\n<p>The above is mostly just an encoding of the part of the law that was applicable to my case, or that I found interesting, the full thing would need much more code, and lots and lots of edge-cases.</p>\n</li>\n<li>\n<p><em>Should</em> such things be automated more? It seems clear that this would have been useful in my case, if I was given access to such software I could have produced the correct set of documents much faster, and understood why things got complex. I think institutions like HMPO shy away from such software because UK nationality law is extremely nuanced, so if a computer program gives a false positive in some case it might cause a lot of trouble, with people complaining they aren't being given a passport even though \"computer says yes\". And full automation, replacing human expertise, can be even worse, with people being denied citizenship because \"computer says no\".</p>\n<p><img alt=\"Computer says no\" src=\"https://jameshaydon.github.io/passport/computer-says-no.jpg\" title=\"No\"/></p>\n</li>\n</ul>\n<hr/>\n<p>I've still not finished my current game of PassportApplication, I'm trying to get through proofs 2 and 3 simultaneously, and failing that will try proof 1.</p>\n</div>\n</div></body></html>",
    "summary": "Solving `Passport Application` with Haskell"
  },
  "2025-07-06-1412-twoandahalfyearsingamedev": {
    "title": "Two And A Half Years In GameDev",
    "url": "https://smyachenkov.com/posts/two-and-half-years-in-gamedev/",
    "url_hash": "df572f9b",
    "date": "2025-07-06T14:12:32.848064",
    "authors": [],
    "content_html": "<html><body><div><div class=\"post-content\"><p>About 3 years ago, I joined a GameDev company, without any prior experience making games or hands-on exposure to this industry.</p>\n<p>Statistically, this time is not even enough’s to release a single game. But during that window, I was lucky to meet many talented people deeply involved in modern GameDev, who shared with me their career journeys, war tales, and anecdotes, and helped me shape my vision.</p>\n<p>One unexpected outcome of this switch was that many friends and former colleagues reached out to me curious about what it was like and how it is comparable to my previous experiences. A surprising amount of them revealed to me that they were secretly planning to pursue this path later in their career, or explore it as a passion project.</p>\n<p>All those conversations with both seasoned insiders and curious bystanders motivated me to give it an attempt to structure it, make sense of some observations, and share insights that stood out.</p>\n<h2 id=\"background\">Background<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#background\">#</a></h2>\n<p>I had a phase during my teenage and early university years when I often thought about how cool it would be to make games. Kinda typical for a ’90s kid, right? But I never went beyond just daydreaming about it.</p>\n<p>After graduation, I never seriously consider a career in GameDev. I followed the more traditional enterprise developer path: small product company, a bigger one, then regional big tech, a multinational corporation.</p>\n<p>I kept following the gaming industry and played games in my free time, but my exposure to professional GameDev was limited to two interviews at local studios, which I attended, to be honest, mostly out of curiosity.</p>\n<p>Three years ago, I was actively looking for the next step in my career and ended up with a couple of offers. One of them was a big international video games developer, that I was very familiar with. Long time ago, I had played their games when they were still in beta and followed their major products and esports events. I figured, why not give it a shot? Worst case, I could always go back to a more “traditional” job.</p>\n<p>I wouldn’t call myself an industry expert, but during that time I’ve seen just enough to recognize what makes this world a little bit different. This post is a collection of what makes GameDev industry unique and different from the perspective of a person who just have visited this realm.</p>\n<h2 id=\"i-people-are-passionate-about-games\">I. People Are Passionate About Games<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#i-people-are-passionate-about-games\">#</a></h2>\n<blockquote>\n<p>You should work in GameDev only if you are passionate about it.</p></blockquote>\n<p>This is the first thing everybody says to you when you strike the conversation about GameDev career. It seems self-explanatory, but I was not fully prepared for how it actually looks like.</p>\n<p>In most other industries with big IT and development departments it is perfectly normal to not care about the products you are working on. Often, it’s downright impossible, for example if you work on something like infrastructure or B2B products. And it’s even expected to maintain a healthy distance from the current work to be able to switch to new projects easily.</p>\n<p>At my new job, I saw people who really allocated their time to play new games, preorder ultimate editions of fresh titles, schedule PTOs around big releases, and take time to talk about games. It was impossible  not to know what was happening in the industry or in the games we were making — all news, controversies, and leaks were thoroughly discussed in casual conversations, chats, and offtopic channels.</p>\n<p>There was a period of time when I stopped following the industry news and playing games myself. But I’m pretty confident that I did not miss anything — just standing near the coffee\nmachine was more than enough to know if the latest DLC for a popular game is good or a total flop.</p>\n<blockquote>\n<p>Can I work in GameDev without caring deeply for games?</p></blockquote>\n<p>A very popular question I got from my friends and an ex-colleagues — is it possible to work there and not play games.</p>\n<p>My short answer: yes. But it heavily depends on the company, its size, focus, and their current challenges. Bigger studios often need specialists in roles where you rarely interact with the actual game. But in a small indie studio, it’s nearly impossible not to be hands-on with the game itself.</p>\n<p>One of the spiciest discussions I saw on internal Blind hub was the thread about impact of “being a hardcore gamer” trait during the interview process. And the general consensus was that today there are many roles where this is absolutely not a blocker, despite many folks missing the old spirit.</p>\n<p>Today, it’s absolutely possible to work in GameDev without a deep passion for games, or gaming background. I worked with people who didn’t play games at all, or had moved on from gaming for personal reasons. They still did excellent work. But the limitation here is that it’s a significantly smaller industry, and if you’re not at least adjacent to gaming culture, you might find yourself out of sync with what’s happening around.</p>\n<h2 id=\"ii-focus-on-creativity\">II. Focus On Creativity<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#ii-focus-on-creativity\">#</a></h2>\n<p>Besides people playing games, one of the most striking contrasts for me was the emphasis on creative disciplines and creative aspects of work, and how deeply it’s ingrained in everything.</p>\n<p><strong>Art Is Everywhere</strong></p>\n<p>Art and creativity matter a lot in games. A game can be an unoptimized pile of garbage that barely works on high-end hardware, but gamers will remember its iconic music, unique characters, and plot dramas. Such demand for artistic content creates a supply of artists of many different kinds: 2D, 3D, UI/UX, video, audio, and numerous management layers between them.</p>\n<p>And these people bring a lot of creativity into every part of life.</p>\n<p>For example, at all-hands meetings and office events, there was always some kind of art or craft on display. People would casually cosplay game characters during the office parties using extremely high-quality costumes they had been building for years. They’d play their own music or show off digital work. And I’m not even starting to talk about sketches and drawings, their workspaces and homes were filled with high-quality illustrations and prints. One of my favorite meeting rooms had a whiteboard that was half-covered in a complex, detailed drawing. It stayed there for months because no one had the heart to erase it.</p>\n<p>That’s a stark contrast to the generic office vibe.</p>\n<p><strong>How It Feels To Be A Boring Part</strong></p>\n<p>And, honestly, sometimes I felt a bit out of place.</p>\n<p>Confession: I’m not a very creative person. I never learned how to draw, not even at a basic level. My attempts to learn how to play music instruments failed miserably. I just feel significantly more comfortable in the world of precise, technical work. So being in a high-creativity environment was sometimes challenging.</p>\n<p>My favourite story about this contrast is my first presentation at a game team all-hands.</p>\n<p>I was working on a new project, and successfully delivered a first version of new piece of payments integration. Sound boring, but it took me a couple of months to get alignment with multiple teams across multiple timezones, put the wheels in motion, and unblock a lot of further work for th next year, so I felt rather confident in my achievements. My presentation was fairly simple: 3–4 slides on a light-grey background with a few architecture diagrams, some graphs, and a couple of key metrics.</p>\n<p>Things started to feel weird as the all-hands began. I saw that all other presenters created a proper shows out of their short presentations. There were memes, music, storytelling. I kid you not, people were telling the whole stories from the perspective of a fictional in-game character that encountered a bug or performance issue like it was a plot arc, and fought alongside with developer to defeat new type of enemies to get to the core of the bug and help developer to fix it. It was wild.</p>\n<p>And my presentation had black and white UML diagrams.</p>\n<p>Timing wasn’t helping the situation much, as my presentation was one of the last one. The more memes I watched, the more I dreaded my 2 minutes of air time. Presentation of a guy before me had a game character twerking over a hip hop beat. How can you beat that?</p>\n<p>After I talked through my slides, there was a pin-drop silence, followed by a question from the host “Is that it? … Cool!”.  I wanted to close my laptop, leave the building and go straight to the airport.</p>\n<p>We had a good laugh about with my manager later.</p>\n<p><strong>Creative Roles Careers</strong></p>\n<p>Another unexpected area for me was exposure to artistic career paths.</p>\n<p>There’s a popular stereotype of the starving artist. So it was eye-opening, and even a bit surreal for me, to meet people who had built successful, high-paying careers in art, often outperforming many other roles in the company. As someone without any creative background, my first instinct was to ask: is there really a difference between those high-caliber artists and “just good ones”? More experienced colleagues actually pointed out the nuances for me: composition, anatomy, stylistic cohesion, other details I wouldn’t have noticed on my own. And even that, they said, was just scratching the surface.</p>\n<p>But the caveat is, that it’s nearly impossible to move up the ranks in a corporate environment by focusing solely on hands-on work. Advancement requires stepping into leadership and scaling the process. This transition can be especially tough in creative fields. Unlike engineering, where senior ICs and managers can and often do stay very close to the code, the general feedback I heard about artists stepping into managerial roles, is that it’s a much more demanding shift with the expense of their own creative involvement.</p>\n<p>En masse, a purely artistic IC role in GameDev is quite often underpaid. The industry heavily relies on using highly visible impact of art and internal appeal of a creative space as alluring non-monetary benefit.</p>\n<p>There’s a popular career tip: when you join a new company, figure out what people are getting promoted for. During my time here, standout promotions and career breakthroughs were often tied to creative wins: a surprisingly successful cosmetic item or a new skin line that went viral. After some thought, I believe that these kinds of successes don’t fit cleanly into the usual “product” or “tech” success definitions of the traditional industries. They belong in their own category, a creative track that’s deeply aligned with the core of game development and it’s creative values.</p>\n<h2 id=\"iii-high-creativity-scope-expectations\">III. High Creativity Scope Expectations<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#iii-high-creativity-scope-expectations\">#</a></h2>\n<p>Being passionate about something is a double-edged sword. If you truly believe in your work, it can greatly elevate your experience, and for many it’s a crucial part of professional life. On the other hand, many people struggle to stay passionate about being creative within tight constraints.</p>\n<p>GameDev industry generates dozens of small and medium sized games daily, but even as a very dedicated player, you are only exposed to a small number of popular titles. Unsurprisingly, the employee experience is quite similar. There’s a good chance that you will end up working on something that you, as a gamer, would never play.</p>\n<p>It’s an extremely common story, when someone with lots of experience, maybe even at a tech lead or managerial level in a small company, joins a FAANG or Big Tech firm, only to find immense disappointment because they now work on a very limited scope in a remote corner of the organization.</p>\n<p>Now multiply that feeling by 20 for people in creative industries, who must work within the tightly defined and specific context of a game and its established style. Many expect to design new systems from scratch, drive art direction, and be praised for breakthroughs. But in large organizations, it’s pretty much expected that you’ll be pigeonholed into a narrow area. Very few dream of working on the 50th swipe animation in a match-3 game or arranging the layout of a store in yet another gacha.</p>\n<p>A very common trajectory of a creative IC I’ve repeatedly seen, even during my relatively short tenure, is a quick change from the excitement of joining a team with a popular game to frustration with the limited creative scope, further narrowed by corporate politics and stack of management. In the end, it was often the reason that motivated people to leave for smaller studios or their own indie projects where they have full creative freedom.</p>\n<p>I was primarily talking about artistic craft in this section because, in my experience, that’s where this issue is most visible. But it would be unfair to not mention tech and development. From my experience, this is a significantly smaller issue for developers and the technical side of things, because there are still many small and large unsolved challenges that one person can take on, especially given the immaturity of tools and the complexity of technical systems. And in tech, creativity is valued more as a force multiplier, rather than as a primary driver.</p>\n<h2 id=\"iv-industry-maturity-and-growth\">IV. Industry Maturity And Growth<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#iv-industry-maturity-and-growth\">#</a></h2>\n<p><strong>Game Industry Grew Up (Sort of)</strong></p>\n<p>GameDev tend to distance themselves from other, “more boring” industries. Difference exists even on the terminology level. For example, office is a <em>studio</em>, product manager becomes a <em>producer</em>. But by many measures, video games have become a mature industry, getting very close to becoming a big and boring corporate job, while internally and culturally maintaining a big distance from other fields.</p>\n<p>For years, video games flew under the radar, pulling off things that more regulated industries wouldn’t even dream of: aggressive gacha mechanics, loot boxes, wildly relaxed age ratings, and barely existant regulatory controls.</p>\n<p>Even owning the game is a gray area today, when most of the platforms allow you only to get a license to play a game, or worse — a license to rent in-game items. Even physical copies can’t protect you from servers going dark and blocking you from accessing your game progression and collections.</p>\n<p>Yet despite those shenanigans, the industry’s growth has been steady, positive, and relentless.</p>\n<p><strong>Disconnected Between Internal and External Growths</strong></p>\n<p>Having this image creates an interesting conflict, that I felt sometimes is hard to get a grasp on for people who have been working in GameDev exclusively. Despite being a full-fledged industry by economic metrics, both internally and in the eyes of the general public, GameDev is often seen as a creative space without rigid rules or bureaucracy.</p>\n<p>I worked at a large company by GameDev standards: several thousand employees, multiple international offices. And I’d routinely see teams actively rejecting exiting practices for managing large-scale projects and work. I often felt like saying: “Guys, we’re not working out of someone’s garage anymore.”</p>\n<p>At first, I thought I was the problem. I thought that I needed to adjust, and that the friction I felt was a sign of immaturity on my part. But over time, I connected with few people who had been there for a long time and had previously built successful careers in other industries before moving into GameDev. And they independently echoed exactly the same experience and emotions from their side after working on different projects and teams over their time in the company.</p>\n<p><strong>Need To Get Up To Speed</strong></p>\n<p>Compared to other mature companies, processes in GameDev are far looser. Whenever I heard genuine praises about well-geared processes, It was often accompanied by the story of how they reached this level by going against the established patterns and due to powerful individual initiative rather than from a systematic efforts.</p>\n<p>Historically, that made some sense. Games didn’t deal with things like sensitive data and real money for a very long time, and were not as highly regulated. But that’s no longer true. With modern game practices like online multiplayer, real-money purchases, lootboxes, DLC and in-game content the stakes have changed dramatically.</p>\n<p>Many mature GameDev companies are no longer small teams running on a thin budgets and betting everything on the next hit. They’re established businesses with long-term roadmaps, real revenue, and high expectations. And while many mature industries learned how to scale with success, In GameDev scalable development is still a problem in search of a solution.</p>\n<p>When you mix that chaos with the passion and creativity that drew most people into the industry, you get something volatile: scale problems, career trajectory confusions, and painful process of transforming creative unbound work into mundane daily job.</p>\n<h2 id=\"v-projects-are-long\">V. Projects Are Long<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#v-projects-are-long\">#</a></h2>\n<p>Development of a new AAA game takes about 5-7 years. If things go well.</p>\n<p>Slightly less known metric — creating a single skin (in-game cosmetics like a weapon, outfit, map, car) in a pipeline of AAA game can take up to a year.</p>\n<p>There’s almost no “fail-fast” style in GameDev, that is very common in tech start-up scene. You don’t ship an MVP to first 100 users, gather their feedback, iterate, and scale. Instead, you work towards the final product with full release, event when game earns the bulk of its revenue, momentum, and visibility.</p>\n<p>Interestingly, this is true for both ends of the spectrum of company type and size: both multi-thousand employee industry giants and lean indie studios share extremely similar expectations of 5-7 years per new title.</p>\n<p>In recent years, early access became a bit more popular, and it helps to acquire some funding and build an audience during the final stretch. But it’s significantly more common for indie titles, and usually happens just 1–2 years before release.</p>\n<p>This long-cycle nature of development amplifies everything other difficulty: burnouts, conflicts, passion, and career progression.</p>\n<p>The disconnect between a fast-paced, crunch-heavy environment and projects that span half a decade takes a serious emotional toll.</p>\n<p>Which leads directly to another interesting phenomenon…</p>\n<h2 id=\"vi-releasing-a-game-is-part-of-the-biography\">VI. Releasing a Game is Part of the Biography<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#vi-releasing-a-game-is-part-of-the-biography\">#</a></h2>\n<blockquote>\n<p>Hi, my name is Mike, I’m a game developer, and I’ve worked on Truck Simulator 2, and it’s spin-off Dark Trucks: Shadows, excited to meet you!</p></blockquote>\n<p>— a totally realistic introduction I’ve heard many times during team onboardings and interviews</p>\n<p>When people in GameDev introduce themselves, they often start with the list of games they’ve worked on. The studio or company name can matter less, since those entities can be even more fragile than the actual games.</p>\n<p>This approach actually works well in the industry, since games are public-facing entities and provide an immediate insight into someone’s scope and achievements.</p>\n<p>There is a less obvious flip side of this convenient approach.</p>\n<p>Some of my colleagues with decades of experience have shared unfortunate stories about their peers who have been working in games for a very long time, but because of project cancellations, bureaucracy limbo,  development hell, they never got the chance to actually ship a game.</p>\n<p>That can be a harsh reality check — in an industry where visibility often equals validation, not shipping can put years of work into dead weight on your resume.</p>\n<h2 id=\"vii-technology\">VII. Technology<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#vii-technology\">#</a></h2>\n<p><strong>Mindset and Priorities</strong></p>\n<p>Technology in GameDev is rarely the main focus, and often lags behind the broader tech industry.</p>\n<p>There is a range of reasons for this. Creative aspects will always be a priority, scale of the user base is often smaller, even for big live games, and the error cost is less significant as well. In addition, games remained a boxed product for much longer than other software, live games(games-as-a-service), is still a fairly new model, and the industry keeps figuring it out.</p>\n<p>This sets quite a different set of expectations for development process, more often  cultural, rather than backed up by real industries discrepancies. I’ve often heard the explanation, “That’s just how it’s always been in GameDev”. But nearly every my peer, who came from non-GameDev industry, admitted that this is often an excuse rather than a real unsolvable problem.</p>\n<p>It often leads to unfortunate situations, where industry-wide standard are considered to be redundant, affecting player experience, before anything else.</p>\n<p>I firmly believe that this is not set in stone, and can be changed for better. That said, besides known difficulties, GameDev has a range of interesting areas and unique problems to tackle, that are hard to come by outside of this industry, which often can require more depth than typical enterprise-dev work.</p>\n<p><strong>Tech Art</strong></p>\n<p>Not surprisingly, many of those unique areas are located on the edge the between art and technology.</p>\n<p>There’s a whole speciality that is commonly referred to as tech-art. It’s an umbrella term, and exact specifics highly depend on the company and even the team, but the main part — it’s a bridge between people who explore and create new content, and integration of this content into a game engine.</p>\n<p>More specifically, it can include such things as shader programming, particle systems, model rigging, ray tracing, 3D texturing, performance optimization of visual part of the game, and fitting all those things into memory budgets.</p>\n<p>There are interesting challenges and there is a lot of very specific skills and knowledge involved. During my last year I was often having lunches with a tech art team, and conversations with those folks were making me feel like 1 semester of 3D graphics in uni 10 years ago was definitely not enough to understand finer details of their work.</p>\n<p>This area of expertise is also highly valuable in the movie and entertainment industries, and to some extent in others, where 3D visualization is a first-class feature, though game development is where it gets the most external visibility.</p>\n<p><strong>Content Tools and Pipelines</strong></p>\n<p>There’s an enormous layer of content management tooling and tech.</p>\n<p>I’m talking about plugins for editors and artists tools, content pipelines, content management system tailored to in-house needs. Those things might look less sexy compared to writing shaders or gameplay code, but they are quite impactful, critical for scalability, and very often overlooked.</p>\n<p>Scale that to multiple editors, integrations with game engine tools, dozens of in-house and outsourced artists teams, and multiple games being developed at the same time, and suddenly, you’ve got an entire departments dedicated to support this layer.</p>\n<p>This also puts a lot of pressure on build and CI/CD systems. Building a game from scratch and preparing the content (asset “cooking”) without any additional assistance can easily take a full working day for a big game. To make it practical, there’s a whole world of distributed build systems for both code and content, a lot of engineering effort goes into making the process work for feature teams, content production, and delivering of new iterations of game builds.</p>\n<p><strong>Testing</strong></p>\n<p>Testing is very big in GameDev. While in other industries it’s often delegated to developers and product-management roles, in GameDev testing is a very integral part of the process and no one even begins to talk about fully reducing/automating QA.</p>\n<p>I believe there’s multiple reasons to it.</p>\n<p>Firstly, a lot of QA work is focused on testing graphics and visual content, how things actually look in a game. For many games, in-game content and cosmetics is the main source of the revenue, and naturally it becomes a part that requires a lot of attention.</p>\n<p>Second can be a lack of testing tooling. More experienced folks here might point me to some UE/Unity tooling or automation frameworks, but give it layer or two of in-house customisations, novelty of the tooling in general, and multiple independent platforms, and suddenly manual testing begins to look not that long and expensive.</p>\n<p>I’m not even starting on in-house engines. Those things can vary so much and their tooling can be in any state, from state-of-the art masterpiece to mash of ideas a working together by a pure miracle, and unsurprisingly, it often leans towards the second one.</p>\n<p>I heard from an acquittance who worked in a mobile puzzle games company (match-3, hidden-object, that kind) that they relatively successfully leveraged AI for testing their games, and it worked well due to a more limited scope of the game.</p>\n<p><strong>Hardware &amp; Platforms</strong></p>\n<p>Another interesting perk is that GameDev is demanding on hardware, and most often you’ll have very powerful PC, especially when things come to graphics.</p>\n<p>Speaking of your PC, you are going to work with Windows.</p>\n<p>Despite the perennial “year of the Linux desktop,” Windows platform remains dominant for gaming. From the developer’s perspective it’s the same story — significant part of engines and tools are not expected to work in Linux/MacOS.</p>\n<p>And as you can guess, writing and porting tooling to those systems is also not a very profitable business, and you’ll have tough luck having full-stack experience.  So prepare to learn some win-specific tools if you ever plan to touch the game.</p>\n<h2 id=\"closure\">Closure<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#closure\">#</a></h2>\n<p>Despite my short tenure, I was lucky to be in a place where I could absorb a wide range of experiences from people who have been in this industry for much longer. People who were deeply invested in it, for better or worse.</p>\n<p>There is one thing the gaming industry does exceptionally well — it connects people who are passionate about it, and leverages this passion, making it a reward in itself.</p>\n<p>In GameDev you will find people for whom making games is the main goal in their lives. You will meet those who left traditional industries to finally chase a childhood dream.  You can find yourself hyper-focused on the specific technical challenges you’d never encounter elsewhere. You will witness strange and beautiful blends of tech, art, and storytelling that few industries can offer. You will work with corporate ladder climbers who, despite being skilled at internal politics, still have to collaborate with people unafraid to challenge decisions that conflict with gamers values.</p>\n<p>And you will see a passionate, chaotic industry fighting with the realities of scale, growth pains, and accepting its maturity.</p>\n<p>The same passion that drives innovation and creativity can also create instability, accelerate burnout, and make it challenging to sustain long-term balance, for both individuals and companies.</p>\n<p>It’s a space where hobby and career blur into something messy, sometimes magical, quite often — frustrating. It definitely doesn’t feel like a regular office job. That’s both its greatest strength and its most persistent challenge.</p>\n</div>\n</div></body></html>",
    "summary": "Two And A Half Years In GameDev"
  }
}