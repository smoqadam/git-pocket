{
  "2025-06-29-1618-solvingpassportapplicationwithhaskell": {
    "title": "Solving `Passport Application` with Haskell",
    "url": "https://jameshaydon.github.io/passport/",
    "url_hash": "60017c5a",
    "date": "2025-06-29T16:18:09.841122",
    "authors": [],
    "content_html": "<html><body><div><div itemprop=\"articleBody\">\n<p>(Comments on <a href=\"https://news.ycombinator.com/item?id=44408872\">HackerNews</a> and <a href=\"https://www.reddit.com/r/haskell/comments/1lmzvus/solving_uk_passport_application_with_haskell/\">Reddit</a>)</p>\n<p>There's a trend at the moment of <a href=\"https://news.ycombinator.com/item?id=44363696\">solving</a> online <a href=\"https://news.ycombinator.com/item?id=44273489\">games</a> with <a href=\"https://news.ycombinator.com/item?id=44259476\">programming</a>, let's do one from the UK called <em>Passport Application</em>, which is developed by <a href=\"https://www.gov.uk/government/organisations/hm-passport-office\">\"His Majesty's Passport Office\"</a> or HMPO. It's a cultural phenomenon in the UK: despite being quite expensive (about £100 just to start) for the standard online version (a masterpiece of minimalist design, entirely text-based), most British play the game, and do so every 10 years or so.</p>\n<p>It's an adventure puzzle document collection game. The premise is to collect enough artefacts, scattered throughout various bureaucratic institutions, until you can prove the statement \"Applicant is British\" according to an extremely complex set of rules, written in arcane language, in various texts called \"acts of parliament\". The prize for winning is a little booklet with a date inside that indicates when you can play again.</p>\n<span id=\"continue-reading\"></span>\n<p>Hardcore players opt for an entirely paper-based version that relies entirely on postal mail. The puzzle-sheets for that look like this:</p>\n<img alt=\"UK Passport Application paper form\" src=\"https://jameshaydon.github.io/passport/paper-form.png\"/>\n<p>There are various instructions for what collectibles need to be gathered, presented in game instruction manuals such as:</p>\n<p><img alt=\"Documents Table\" src=\"https://jameshaydon.github.io/passport/docs-table.jpg\" title=\"Documents Table\"/></p>\n<p>The game starts easy enough, you just need to enter basic facts about the applicant, and take a photo of them. But things get tougher from there, with various side-quests, all designed to be fun:</p>\n<ul>\n<li>HMPO sometimes decides to send you on an \"identity confirmation\" side quest. This involves finding someone whose job/status is one of a finite list, things like \"accountant\" or \"civil servant\", but they also have some fun ones like \"chiropodist\", \"funeral director\" and \"airline pilot\". Once you've managed to track down such a person, preferably one who knows you, you must socially engineer them into filling in some webforms.</li>\n<li>The main mechanic of the game involves sending in \"original\" documents. Documents that are not in english need to be paired with an \"officially certified translation\", which triggered some cool side-quests in my case like \"how to get a certified translation of a French marriage certificate, which is in my possession in Japan, and have both sent to HMPO by mail\".</li>\n<li>Some documents relate to family members, and so you need to start getting the whole family involved in a co-op mode.</li>\n<li>And of course the bureaucratic institutions you must request some documents from have their own arcane gameplay.</li>\n</ul>\n<p>All this keeps the game interesting and fun, taking weeks and sometimes months to complete. Non-British people aren't <em>really</em> supposed to play, but seeing as proving Britishness is the whole object of the game, it's actually open to anyone! I thoroughly encourage you to give it a go.</p>\n<p>So this time I was playing on behalf of my daughter, because I'd already completed the game recently, and besides she's too young to play on her own. I played online and chose the \"first child passport born abroad\" difficulty level, so expected it to be quite challenging from the outset. After a round of waiting, the first round of document requests came through.\nQuite a lot of documents, most of which seemed quite unrelated to the main objective, but that's the game. I started collecting them but some were quite difficult to obtain so I decided to use the chat feature. You see your game is handled by a person called an \"examiner\", they are the ones who send you on document gathering quests, according to their interpretation of the rules. To add an extra layer of difficulty, you can't directly communicate with this person, you can only talk to \"advice agents\" using a chat or telephone service. These agents offer advice on side-quests, but nothing they say is official. They can pass along questions to the examiner, but that triggers a few days of waiting time, sometimes up to 10 days in my case, a tactic used to build suspense.</p>\n<p>Quite quickly the chat service told me that 50% of the initial documents requested were unnecessary; it was all just a misdirection! So another round of waiting, and then more document requests. You get document requests via emails like this:</p>\n<img alt=\"Document Request\" src=\"https://jameshaydon.github.io/passport/doc-request-email.png\"/>\n<p>The document requests are paired with some cryptic explanations that are somewhat helpful but still vague enough to keep the game interesting. Why don't I have parental responsibility for <code>__APPLICANT_NAME__</code>? One of the listed conditions is \"named on the child's birth certificate\", which I am, and was already sent to them, along with the Japanese→English translation. Maybe they also need proof of the first condition, despite the second, and despite this document not having been requested earlier in the process. In any case I can't satisfy the third. Or maybe some automated system has messed up; the broken HTML templating indicates that maybe <code>APPLICANT_NAME == NULL</code> in some database, who knows.</p>\n<p>Another round of document requests, one for a document that doesn't exist, another round of helpline. More explorations of conversation trees with NPCs, an alternative path to the goal is found, more documents. This culminated in a rare relic request:</p>\n<blockquote>\n<p>Applicant's Paternal great-grandfather's birth certificate and marriage certificate</p>\n</blockquote>\n<p>One of these documents is almost 100 years old! Of course <code>applicant's Paternal great grandfather</code> is ambiguous, since most people have 2 of them, but this is standard misdirection at this point and all part of the fun. After decrypting this to <code>applicant's father's father's father's birth certificate</code> I started to wonder why such a distant document would be requested. Engaging the advice agents didn't help much, one launched into explanations as to why\n$$\\text{birthCirt}(\\text{father}^2(\\text{applicant}))$$ was needed even though this document was already in their possession, and I was asking about\n$$\\text{birthCirt}(\\text{father}^3(\\text{applicant}))$$, then admitted they couldn't quite say why the was needed.</p>\n<p>So what's going on here? It's important to understand the sort of logic used by HMPO in the <em>Passport Application</em> game. It's called <strong>Bureaucratic Logic</strong>, it derives from <a href=\"https://en.wikipedia.org/wiki/Constructive_logic\">Constructive Logic</a>, in that one cannot just make valid arguments, that would be too easy, one has to construct proofs of a particular nature to back them up. Constructive logic has witnesses, Bureaucratic logic has original documents.</p>\n<p>For example, like constructive logic, HMPO doesn't allow you to use excluded middle: $P \\lor \\lnot P$ ($P$ or not $P$) is not in general valid. The gameplay is greatly influenced by answers to questions such as \"was applicant's father's father born in the UK or not born in the UK?\" But you can't just say \"yes one of those is true\" and then provide documents for both resulting scenarios. That would be using excluded middle. You <em>must</em> commit to one alternative <em>and</em> provide a document for that. This is were it's important to remember that it's not about actually demonstrating citizenship, for which excluded middle would be a perfectly valid argument, <em>Passport Application</em> is about having fun gathering documents. Don't question the rules too much or you'll stop having fun.</p>\n<p>The second piece of the puzzle is in the guidance that accompanies the document requests:</p>\n<blockquote>\n<p>British passports are issued to those who have a claim to British nationality under the British Nationality Act 1981. This is decided mainly by a person’s place and date of birth and their parents’ places and dates of birth. A person born outside of the UK after 31 December 1982 is normally a British citizen only if, at the time of their birth one parent is a British citizen otherwise than by descent, such as through birth in the UK or registration or naturalisation as a British citizen.</p>\n</blockquote>\n<p>Note that the Britishness of a person can be dependent on the Britishness of their parents. The final piece of the puzzle is that HMPO doesn't trust its own passports records to prove Britishness. This is the mechanic which, in some cases, kicks off <em>recursive</em> document requests up the family tree, until a base case is reached. What are the base cases? A base case is an ancestor whose Britishness <em>does not</em> depend on a parent, e.g. someone who was naturalised, or born in the UK before 1983 (which makes one unconditionally british regardless of parents). That's right, further into the future we get from 1983, the taller these call-stacks can get. Fun!</p>\n<p>This is how the request chain pertaining to this document played out in my case (in parallel to other requests), quotes are from HMPO emails:</p>\n<p>Note that the recursion is playing out via email.</p>\n<p>At this point I did what any sane person would do, I reached for a logic programming language and decided to encode the rules in the hope of figuring out what was going on. Is it possible to write some code which could have produced the full list of required documents upfront, with no confusion, and perfect explanations? Of course this would ruin all the fun of the game, which is why HMPO doesn't do it, but let's forge ahead.</p>\n<h2 id=\"haskell-code\">Haskell code</h2>\n<p>(Full code is on <a href=\"https://github.com/jameshaydon/uk-passport/blob/main/src/Lib.hs\">GitHub</a>.)</p>\n<p>At first I started encoding the rules in Prolog, but switched to Haskell's <code>LogicT</code> monad after a while. The basic goal here is to produce the full list of documents required for the application. But this isn't quite right: because there are several ways one can claim Britishness, there are several sets of documents that can work, and you only need one of them. So really one is looking for a function that returns <code>Set (Set Document)</code>, where</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>data </span><span>Parent </span><span>= </span><span>Mother </span><span>| </span><span>Father\n</span><span>  </span><span>deriving</span><span> (</span><span>Show</span><span>, </span><span>Eq</span><span>, </span><span>Ord</span><span>)\n</span><span>\n</span><span>data </span><span>Person </span><span>= </span><span>Applicant </span><span>| </span><span>Parent Parent Person\n</span><span>  </span><span>deriving</span><span> (</span><span>Show</span><span>, </span><span>Eq</span><span>, </span><span>Ord</span><span>)\n</span><span>  \n</span><span>data </span><span>Document\n</span><span>  </span><span>= </span><span>BirthCertificate Person\n</span><span>  </span><span>| </span><span>MarriageCertificate Person Person\n</span><span>  </span><span>| </span><span>NaturalizationCertificate Person\n</span><span>  </span><span>| </span><span>Passport Person\n</span><span>  </span><span>-- more documents\n</span><span>  </span><span>deriving</span><span> (</span><span>Show</span><span>, </span><span>Eq</span><span>, </span><span>Ord</span><span>)\n</span></code></pre>\n<p>But this is also unsatisfying, because you want to know <em>why</em> a certain document set is enough. So this is really a proof-search problem, and we proceed in two stages:</p>\n<ul>\n<li>we use <code>LogicT</code> to enumerate all the <code>Proof</code>s of Britishness for the applicant, given some information about them, and</li>\n<li>for each <code>Proof</code> we compute the <code>Set (Set Document)</code> that is needed to satisfy that proof.</li>\n</ul>\n<p>This two-staged approach is what made me switch to Haskell, though I'm sure someone more experienced with Prolog would have made it work.</p>\n<p>So we define a simple proof type:</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>data </span><span>Proof\n</span><span>  </span><span>= </span><span>-- Deriving britishness via a parent, and their proof of britishness\n</span><span>    </span><span>ViaParent Person Proof\n</span><span>  </span><span>| </span><span>-- Britishness via two claims.\n</span><span>    </span><span>And Proof Proof\n</span><span>  </span><span>| </span><span>-- Foundational evidence.\n</span><span>    </span><span>Evidence Predicate\n</span><span>  </span><span>deriving</span><span> (</span><span>Show</span><span>)\n</span></code></pre>\n<p>This type could be made much more complex, detailing each rule that was used, but this simpler type was at least enough for my purposes. One feature I wanted was that one would not need to provide all the information upfront, instead questions would be asked interactively, and only if needed. Furthermore, previous facts should be retained and used for all branches, backtracking, etc. So we need <code>IO</code> and <code>State</code>, and we want the state to be global across all branches:</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>data </span><span>Knowledge </span><span>= </span><span>SureYes </span><span>| </span><span>SureNo </span><span>| </span><span>Unsure\n</span><span>  </span><span>deriving</span><span> (</span><span>Eq</span><span>)\n</span><span>\n</span><span>type </span><span>Claims </span><span>= </span><span>Map Predicate Knowledge\n</span><span>\n</span><span>type </span><span>M</span><span> a </span><span>= </span><span>StateT Claims</span><span> (</span><span>LogicT IO</span><span>) a\n</span></code></pre>\n<p>Here <code>Predicate</code>s are the sorts of things that are true of a person and affect how the rules of the game play out:</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>data </span><span>Predicate\n</span><span>  </span><span>= </span><span>IsBritish Person\n</span><span>  </span><span>| </span><span>Settled Person\n</span><span>  </span><span>| </span><span>BornBefore Int Person\n</span><span>  </span><span>| </span><span>BornInUK Person\n</span><span>  </span><span>| </span><span>BornAfter Int Person\n</span><span>  </span><span>| </span><span>Naturalized Person\n</span><span>  </span><span>| </span><span>Years3LivingInUK Person\n</span><span>  </span><span>| </span><span>IsBritOtbd Person\n</span><span>  </span><span>| </span><span>Married Person Person\n</span><span>  </span><span>deriving</span><span> (</span><span>Show</span><span>, </span><span>Eq</span><span>, </span><span>Ord</span><span>)\n</span></code></pre>\n<p>Here is then the root function for Britishness:</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>-- | Is a person british?\n</span><span>brit </span><span>:: Person -&gt; M Proof\n</span><span>brit p </span><span>=\n</span><span>  </span><span>do\n</span><span>    check (</span><span>IsBritish</span><span> p)\n</span><span>    byBirth </span><span>&lt;|&gt;</span><span> naturalised\n</span><span>  </span><span>where\n</span><span>    byBirth </span><span>=\n</span><span>      ifThenElse\n</span><span>        (evidence (</span><span>BornInUK</span><span> p))\n</span><span>        (britBornInUk p)\n</span><span>        (britBornAbroad p)\n</span><span>    naturalised </span><span>=</span><span> evidence (</span><span>Naturalised</span><span> p)\n</span></code></pre>\n<p>The <code>check</code> function here interacts with the user, to avoid launching into an investigation if the user knows that person is not british:</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>-- | Ask about a predicate, failing if the answer is a sure no.\n</span><span>check </span><span>:: Predicate -&gt; M </span><span>()\n</span><span>check q </span><span>= </span><span>do\n</span><span>  answer </span><span>&lt;-</span><span> question q\n</span><span>  guard (answer </span><span>/= </span><span>SureNo</span><span>)\n</span></code></pre>\n<p>A person is <code>brit</code> either <code>byBirth</code> or <code>naturalised</code>. Naturalisation is the simplest, as a single certificate is then the sole document needed. Britishness by birth forks mainly on whether or not the person was born in the UK, and we go to sub-routines:</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>-- | UK-born citizenship (pre-1983 or via parent)\n</span><span>britBornInUk </span><span>:: Person -&gt; M Proof\n</span><span>britBornInUk p </span><span>=</span><span> evidence (</span><span>BornBefore 1983</span><span> p) </span><span>`</span><span>orElse</span><span>`</span><span> britBornInUkViaParent p\n</span><span>\n</span><span>-- | UK-born citizenship via parent (used for post-1983 births)\n</span><span>britBornInUkViaParent </span><span>:: Person -&gt; M Proof\n</span><span>britBornInUkViaParent p </span><span>=</span><span> viaParent p (</span><span>\\</span><span>parent </span><span>-&gt;</span><span> brit parent </span><span>`</span><span>orElse</span><span>`</span><span> settled parent)\n</span></code></pre>\n<p>People born in the UK before <code>1983</code> are a base case, they are unconditionally British. Otherwise they acquire it via at least one their parents, who must be either British themselves or \"settled\" at time of birth. The <code>orElse</code> function here is similar to <code>&lt;|&gt;</code>, but doesn't include proofs from the second branch at all if the first is successful (<code>&lt;|&gt;</code> always accumulates proofs from both branches). E.g. if <code>brit parent</code> is true then <code>settled parent</code> doesn't apply: there is no notion of \"settled in the UK\" for British people.</p>\n<p>When not born in the UK things are more complex:</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>-- | British citizenship for those born abroad\n</span><span>britBornAbroad </span><span>:: Person -&gt; M Proof\n</span><span>britBornAbroad p </span><span>=\n</span><span>  viaParent p </span><span>$ \\</span><span>parent </span><span>-&gt;\n</span><span>    britOtbd parent </span><span>`</span><span>orElse</span><span>`</span><span> (brit parent </span><span>`</span><span>and</span><span>`</span><span> evidence (</span><span>Years3LivingInUK</span><span> parent))\n</span><span>\n</span><span>-- | British otherwise than by descent (BOTD)\n</span><span>britOtbd </span><span>:: Person -&gt; M Proof\n</span><span>britOtbd p </span><span>= </span><span>do\n</span><span>  check (</span><span>IsBritOtbd</span><span> p)\n</span><span>  evidence (</span><span>Naturalised</span><span> p) </span><span>`</span><span>orElse</span><span>`</span><span> britOtbdUkBorn </span><span>`</span><span>orElse</span><span>`</span><span> bornCrownService p\n</span><span>  </span><span>where\n</span><span>    britOtbdUkBorn </span><span>=</span><span> evidence (</span><span>BornInUK</span><span> p) </span><span>`</span><span>and</span><span>`</span><span> britBornInUk p\n</span><span>\n</span><span>bornCrownService </span><span>:: Person -&gt; M Proof\n</span><span>bornCrownService p </span><span>=</span><span> viaParent p </span><span>$ \\</span><span>parent </span><span>-&gt; </span><span>do\n</span><span>  check (</span><span>CrownService</span><span> parent)\n</span><span>  brit parent </span><span>`</span><span>and</span><span>`</span><span> evidence (</span><span>CrownService</span><span> parent)\n</span></code></pre>\n<p>When not born in the UK, you get citizenship from your parents in the usual way only if there is evidence of 3 years of consecutive living in the UK, or if born from a person that is <em>British otherwise than by descent</em> (BOTBD). This is a person with \"super Britishness\", they can confer citizenship to their children unconditionally (well, apart from having to play hard games of <code>Passport Application</code>). The basic idea is that someone is BOTBD if they didn't become British purely via a parent. E.g. they were naturalised, or born in the UK, etc. There are <em>many</em> edge-cases in the rules, and I've only coded those that are most relevant to my case. One of them is <code>bornCrownService</code>, this says that one is still BOTBD if born abroad <em>because a parent was working in \"Crown Service\"</em>, e.g. in an embassy. This happens to be the case of $\\text{father}^3(\\text{applicant})$ during the birth of $\\text{father}^2(\\text{applicant})$, but is this relevant? We'll have to wait till we've coded enough to run this program.</p>\n<p>A lot of these functions rely on a higher order function <code>viaParent</code>, which mediates how citizenship is passed down to children:</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>viaParent </span><span>:: Person -&gt;</span><span> (</span><span>Person -&gt; M Proof</span><span>) </span><span>-&gt; M Proof\n</span><span>viaParent p cond </span><span>=</span><span> viaMother </span><span>&lt;|&gt;</span><span> viaFather\n</span><span>  </span><span>where\n</span><span>    via parent </span><span>= </span><span>ViaParent</span><span> (</span><span>Parent</span><span> parent p) </span><span>&lt;$&gt;</span><span> cond (</span><span>Parent</span><span> parent p)\n</span><span>    viaMother </span><span>=</span><span> via </span><span>Mother\n</span><span>    viaFather </span><span>=\n</span><span>      ifThenElse\n</span><span>        (evidence (</span><span>BornAfter 2006</span><span> p))\n</span><span>        (via </span><span>Father</span><span>)\n</span><span>        (married (</span><span>Parent Father</span><span> p) (</span><span>Parent Mother</span><span> p) </span><span>`</span><span>and</span><span>`</span><span> via </span><span>Father</span><span>)\n</span></code></pre>\n<p>This takes a person, and a <code>cond</code>ition for a parent, and produces a proof of Britishness for <code>p</code> as long as <code>cond</code> can be proved for one of <code>p</code>'s parents. There is an extra complication here relating to laws surrounding \"illegitimate\" children born before 2006, so an extra check for marriage is required in some cases. There are ways around this not codified here (\"registration\"). There are other sexist clauses too, about only fathers passing on Britishness in some cases, that I also haven't codified here. It's interesting that even though some of these laws no longer apply, they apply <em>historically</em> when trying to work out if an ancestor was british. That's right, to play <code>Passport Application</code> you need to consult laws from many different times!</p>\n<p>To run the code we <code>observeAllT (evalStateT m Map.empty)</code>, the <code>Map.empty</code> indicating we start with no knowledge. Once a proof has been found we use <code>docs :: Proof -&gt; Logic (Set Document)</code> to produce the needed documents for <em>that path</em> to citizenship. This will mostly list out documents for foundational evidence, and e.g. make sure that when <code>ViaParent</code> is used, a birth certificate linking parent and child is produced.</p>\n<p>Let's run it!</p>\n<pre><code><span>ghci&gt; run (brit Applicant)\n</span><span>? : Applicant is british\n</span><span>y\n</span><span>? : Applicant was born in UK\n</span><span>n\n</span><span>? : Applicant's Mother is british otherwise than by descent\n</span><span>n\n</span><span>? : Applicant was born after 2006\n</span><span>y\n</span><span>? : Applicant's Father is british otherwise than by descent\n</span><span>y\n</span><span>? : Applicant's Father was born in UK\n</span><span>y\n</span><span>? : Applicant's Father was born before 1983\n</span><span>n\n</span><span>? : Applicant's Father's Mother is british\n</span><span>n\n</span><span>? : Applicant's Father's Mother was settled at time of birth\n</span><span>y\n</span><span>? : Applicant's Father was born after 2006\n</span><span>n\n</span><span>? : Applicant's Father's Father was married to Applicant's Father's Mother at time of birth\n</span><span>y\n</span><span>? : Applicant's Father's Father is british\n</span><span>...\n</span></code></pre>\n<p>This goes on for quite some questions, 37 in my case. You can answer question like <code>Applicant's Mother is british otherwise than by descent</code> with \"dk\" (don't know), and in this case it will explore the tree for you, the main use is <em>not</em> exploring this branch if you do know it is futile.</p>\n<p>Once all the citizenship proofs are produced, they are printed and possible document sets are produced:</p>\n<pre><code><span>Applicant has 3 proof(s) of britishness:\n</span><span>\n</span><span>-----------\n</span><span>Proof 1:\n</span><span>\n</span><span>• Applicant was born after 2006\n</span><span>• Via Applicant's Father's britishness:\n</span><span>    • Applicant's Father was born in UK\n</span><span>    • Via Applicant's Father's Mother's britishness:\n</span><span>        Applicant's Father's Mother was settled at time of birth\n</span><span>\n</span><span>Possible doc sets:\n</span><span>• - Birth certificate for Applicant,\n</span><span>  - Birth certificate for Applicant's Father,\n</span><span>  - Settled status document for Applicant's Father's Mother\n</span><span>\n</span><span>-----------\n</span><span>Proof 2:\n</span><span>\n</span><span>• Applicant was born after 2006\n</span><span>• Via Applicant's Father's britishness:\n</span><span>    • Applicant's Father was born in UK\n</span><span>    • • Applicant's Father's Father was married to Applicant's Father's Mother at time of birth\n</span><span>      • Via Applicant's Father's Father's britishness:\n</span><span>          Via Applicant's Father's Father's Mother's britishness:\n</span><span>            • Applicant's Father's Father's Mother was born in UK\n</span><span>            • Applicant's Father's Father's Mother was born before 1983\n</span><span>\n</span><span>Possible doc sets:\n</span><span>• - Birth certificate for Applicant,\n</span><span>  - Birth certificate for Applicant's Father's Father's Mother,\n</span><span>  - Birth certificate for Applicant's Father,\n</span><span>  - Birth certificate for Applicant's Father's Father,\n</span><span>  - Marriage certificate for Applicant's Father's Father and Applicant's Father's Mother\n</span><span>\n</span><span>-----------\n</span><span>Proof 3:\n</span><span>\n</span><span>• Applicant was born after 2006\n</span><span>• Via Applicant's Father's britishness:\n</span><span>    • Applicant's Father was born in UK\n</span><span>    • • Applicant's Father's Father was married to Applicant's Father's Mother at time of birth\n</span><span>      • Via Applicant's Father's Father's britishness:\n</span><span>          • Applicant's Father's Father's Father was married to Applicant's Father's Father's Mother at time of birth\n</span><span>          • Via Applicant's Father's Father's Father's britishness:\n</span><span>              • Applicant's Father's Father's Father was born in UK\n</span><span>              • Applicant's Father's Father's Father was born before 1983\n</span><span>\n</span><span>Possible doc sets:\n</span><span>• - Birth certificate for Applicant,\n</span><span>  - Birth certificate for Applicant's Father,\n</span><span>  - Birth certificate for Applicant's Father's Father,\n</span><span>  - Birth certificate for Applicant's Father's Father's Father,\n</span><span>  - Marriage certificate for Applicant's Father's Father and Applicant's Father's Mother,\n</span><span>  - Marriage certificate for Applicant's Father's Father's Father and Applicant's Father's Father's Mother\n</span></code></pre>\n<p>And there it is, in <code>Proof 3</code>:</p>\n<pre><code><span>Birth certificate for Applicant's Father's Father's Father\n</span></code></pre>\n<p>The \"Crown Service\" status of $\\text{father}^3(\\text{applicant})$ caused quite some confusion in my case, because $\\text{father}^2(\\text{applicant})$ was indeed born abroad, causing some amount of recursion. But hilariously the crown service of $\\text{father}^3(\\text{applicant})$ turns out to be totally irrelevant, indeed the BOTBD status of $\\text{father}^1(\\text{applicant})$ is already derived from being born in the UK and simple Britishness of $\\text{father}^2(\\text{applicant})$. But this simple Britishness still needs to be established, so the recursion to $\\text{father}^2(\\text{applicant})$ still occurs. And the marriage certificate is needed too, for the \"legitimacy\" of $\\text{father}^2(\\text{applicant})$; the marital status of my deceased grandparents has suddenly become one of my most important concerns.</p>\n<p>Interestingly, the proof that HMPO has selected for my case is the longest and most complex of the 3, I assume that when there are several choices they send the player down the most complex one, for extra fun. Indeed <code>Proof 1</code> is quite simple, it requires only proving a settled status of one ancestor <em>and that's it</em>. Citizenship via <em>non-british</em> settled ancestors can be much simpler, because these cases are non-recursive. <code>Proof 2</code> is also slightly more optimized, because it relies on <code>Birth certificate for Applicant's Father's Father's Mother</code>, which therefore bypasses the need for a marriage certificate, needed in <code>Proof 3</code> to prove \"legitimacy\" of <code>Applicant's Father's Father</code>.</p>\n<p>Proofs relying on Britishness bottom out when reaching a person born before 1983 in the UK, the further we get from this date, the longer the proofs become. This applies, at least in theory, <em>even when everyone involved is born in the UK</em>. In practice this doesn't happen because HMPO doesn't actually apply the laws as written in the act, they have their own guidance documents, and act using the principle of <a href=\"https://www.gov.uk/government/publications/balance-of-probabilities/balance-of-probabilities-accessible\">balance of probabilities</a>, and there seems to be guidance indicating that for standard applications from the UK for people born in the UK, one can use \"Main Index\" (their internal passport database). So you have to play on \"hard mode\", e.g. birth abroad, which triggers some global \"extra scrutiny\" flag, which prevents the use of \"Main Index\" in <em>all recursive calls</em>.</p>\n<ul>\n<li>\n<p>There are several places where I have used <code>orElse</code>, but <code>&lt;|&gt;</code> could be used instead. As mentioned above, <code>&lt;|&gt;</code> will explore both branches, but <code>orElse</code> only explores the second branch if the first completely fails. In the case of</p>\n<pre class=\"language-haskell\" data-lang=\"haskell\"><code class=\"language-haskell\" data-lang=\"haskell\"><span>brit parent </span><span>`</span><span>orElse</span><span>`</span><span> settled parent\n</span></code></pre>\n<p>this is completely valid, but in some of the other situations it's not so simple. This one for example:</p>\n<pre><code><span>britOtbd parent `orElse` and (brit parent) (evidence (Years3LivingInUK parent))\n</span></code></pre>\n<p>really could be an <code>&lt;|&gt;</code>, and in my case it makes for much more proofs of citizenship. But it involves an extra level of bureaucratic process (\"Registration\"), so it seems HMPO will try to exhaust <code>britOtbd parent</code> before trying the second branch.</p>\n</li>\n<li>\n<p>Some things are not tracked carefully enough, for example there are something which have to be true <em>at</em> certain times, e.g. some people need to be married or settled specifically at the time some other person was born. But this wouldn't be hard to do.</p>\n</li>\n<li>\n<p>The above is mostly just an encoding of the part of the law that was applicable to my case, or that I found interesting, the full thing would need much more code, and lots and lots of edge-cases.</p>\n</li>\n<li>\n<p><em>Should</em> such things be automated more? It seems clear that this would have been useful in my case, if I was given access to such software I could have produced the correct set of documents much faster, and understood why things got complex. I think institutions like HMPO shy away from such software because UK nationality law is extremely nuanced, so if a computer program gives a false positive in some case it might cause a lot of trouble, with people complaining they aren't being given a passport even though \"computer says yes\". And full automation, replacing human expertise, can be even worse, with people being denied citizenship because \"computer says no\".</p>\n<p><img alt=\"Computer says no\" src=\"https://jameshaydon.github.io/passport/computer-says-no.jpg\" title=\"No\"/></p>\n</li>\n</ul>\n<hr/>\n<p>I've still not finished my current game of PassportApplication, I'm trying to get through proofs 2 and 3 simultaneously, and failing that will try proof 1.</p>\n</div>\n</div></body></html>",
    "summary": "Solving `Passport Application` with Haskell"
  },
  "2025-07-06-1412-twoandahalfyearsingamedev": {
    "title": "Two And A Half Years In GameDev",
    "url": "https://smyachenkov.com/posts/two-and-half-years-in-gamedev/",
    "url_hash": "df572f9b",
    "date": "2025-07-06T14:12:32.848064",
    "authors": [],
    "content_html": "<html><body><div><div class=\"post-content\"><p>About 3 years ago, I joined a GameDev company, without any prior experience making games or hands-on exposure to this industry.</p>\n<p>Statistically, this time is not even enough’s to release a single game. But during that window, I was lucky to meet many talented people deeply involved in modern GameDev, who shared with me their career journeys, war tales, and anecdotes, and helped me shape my vision.</p>\n<p>One unexpected outcome of this switch was that many friends and former colleagues reached out to me curious about what it was like and how it is comparable to my previous experiences. A surprising amount of them revealed to me that they were secretly planning to pursue this path later in their career, or explore it as a passion project.</p>\n<p>All those conversations with both seasoned insiders and curious bystanders motivated me to give it an attempt to structure it, make sense of some observations, and share insights that stood out.</p>\n<h2 id=\"background\">Background<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#background\">#</a></h2>\n<p>I had a phase during my teenage and early university years when I often thought about how cool it would be to make games. Kinda typical for a ’90s kid, right? But I never went beyond just daydreaming about it.</p>\n<p>After graduation, I never seriously consider a career in GameDev. I followed the more traditional enterprise developer path: small product company, a bigger one, then regional big tech, a multinational corporation.</p>\n<p>I kept following the gaming industry and played games in my free time, but my exposure to professional GameDev was limited to two interviews at local studios, which I attended, to be honest, mostly out of curiosity.</p>\n<p>Three years ago, I was actively looking for the next step in my career and ended up with a couple of offers. One of them was a big international video games developer, that I was very familiar with. Long time ago, I had played their games when they were still in beta and followed their major products and esports events. I figured, why not give it a shot? Worst case, I could always go back to a more “traditional” job.</p>\n<p>I wouldn’t call myself an industry expert, but during that time I’ve seen just enough to recognize what makes this world a little bit different. This post is a collection of what makes GameDev industry unique and different from the perspective of a person who just have visited this realm.</p>\n<h2 id=\"i-people-are-passionate-about-games\">I. People Are Passionate About Games<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#i-people-are-passionate-about-games\">#</a></h2>\n<blockquote>\n<p>You should work in GameDev only if you are passionate about it.</p></blockquote>\n<p>This is the first thing everybody says to you when you strike the conversation about GameDev career. It seems self-explanatory, but I was not fully prepared for how it actually looks like.</p>\n<p>In most other industries with big IT and development departments it is perfectly normal to not care about the products you are working on. Often, it’s downright impossible, for example if you work on something like infrastructure or B2B products. And it’s even expected to maintain a healthy distance from the current work to be able to switch to new projects easily.</p>\n<p>At my new job, I saw people who really allocated their time to play new games, preorder ultimate editions of fresh titles, schedule PTOs around big releases, and take time to talk about games. It was impossible  not to know what was happening in the industry or in the games we were making — all news, controversies, and leaks were thoroughly discussed in casual conversations, chats, and offtopic channels.</p>\n<p>There was a period of time when I stopped following the industry news and playing games myself. But I’m pretty confident that I did not miss anything — just standing near the coffee\nmachine was more than enough to know if the latest DLC for a popular game is good or a total flop.</p>\n<blockquote>\n<p>Can I work in GameDev without caring deeply for games?</p></blockquote>\n<p>A very popular question I got from my friends and an ex-colleagues — is it possible to work there and not play games.</p>\n<p>My short answer: yes. But it heavily depends on the company, its size, focus, and their current challenges. Bigger studios often need specialists in roles where you rarely interact with the actual game. But in a small indie studio, it’s nearly impossible not to be hands-on with the game itself.</p>\n<p>One of the spiciest discussions I saw on internal Blind hub was the thread about impact of “being a hardcore gamer” trait during the interview process. And the general consensus was that today there are many roles where this is absolutely not a blocker, despite many folks missing the old spirit.</p>\n<p>Today, it’s absolutely possible to work in GameDev without a deep passion for games, or gaming background. I worked with people who didn’t play games at all, or had moved on from gaming for personal reasons. They still did excellent work. But the limitation here is that it’s a significantly smaller industry, and if you’re not at least adjacent to gaming culture, you might find yourself out of sync with what’s happening around.</p>\n<h2 id=\"ii-focus-on-creativity\">II. Focus On Creativity<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#ii-focus-on-creativity\">#</a></h2>\n<p>Besides people playing games, one of the most striking contrasts for me was the emphasis on creative disciplines and creative aspects of work, and how deeply it’s ingrained in everything.</p>\n<p><strong>Art Is Everywhere</strong></p>\n<p>Art and creativity matter a lot in games. A game can be an unoptimized pile of garbage that barely works on high-end hardware, but gamers will remember its iconic music, unique characters, and plot dramas. Such demand for artistic content creates a supply of artists of many different kinds: 2D, 3D, UI/UX, video, audio, and numerous management layers between them.</p>\n<p>And these people bring a lot of creativity into every part of life.</p>\n<p>For example, at all-hands meetings and office events, there was always some kind of art or craft on display. People would casually cosplay game characters during the office parties using extremely high-quality costumes they had been building for years. They’d play their own music or show off digital work. And I’m not even starting to talk about sketches and drawings, their workspaces and homes were filled with high-quality illustrations and prints. One of my favorite meeting rooms had a whiteboard that was half-covered in a complex, detailed drawing. It stayed there for months because no one had the heart to erase it.</p>\n<p>That’s a stark contrast to the generic office vibe.</p>\n<p><strong>How It Feels To Be A Boring Part</strong></p>\n<p>And, honestly, sometimes I felt a bit out of place.</p>\n<p>Confession: I’m not a very creative person. I never learned how to draw, not even at a basic level. My attempts to learn how to play music instruments failed miserably. I just feel significantly more comfortable in the world of precise, technical work. So being in a high-creativity environment was sometimes challenging.</p>\n<p>My favourite story about this contrast is my first presentation at a game team all-hands.</p>\n<p>I was working on a new project, and successfully delivered a first version of new piece of payments integration. Sound boring, but it took me a couple of months to get alignment with multiple teams across multiple timezones, put the wheels in motion, and unblock a lot of further work for th next year, so I felt rather confident in my achievements. My presentation was fairly simple: 3–4 slides on a light-grey background with a few architecture diagrams, some graphs, and a couple of key metrics.</p>\n<p>Things started to feel weird as the all-hands began. I saw that all other presenters created a proper shows out of their short presentations. There were memes, music, storytelling. I kid you not, people were telling the whole stories from the perspective of a fictional in-game character that encountered a bug or performance issue like it was a plot arc, and fought alongside with developer to defeat new type of enemies to get to the core of the bug and help developer to fix it. It was wild.</p>\n<p>And my presentation had black and white UML diagrams.</p>\n<p>Timing wasn’t helping the situation much, as my presentation was one of the last one. The more memes I watched, the more I dreaded my 2 minutes of air time. Presentation of a guy before me had a game character twerking over a hip hop beat. How can you beat that?</p>\n<p>After I talked through my slides, there was a pin-drop silence, followed by a question from the host “Is that it? … Cool!”.  I wanted to close my laptop, leave the building and go straight to the airport.</p>\n<p>We had a good laugh about with my manager later.</p>\n<p><strong>Creative Roles Careers</strong></p>\n<p>Another unexpected area for me was exposure to artistic career paths.</p>\n<p>There’s a popular stereotype of the starving artist. So it was eye-opening, and even a bit surreal for me, to meet people who had built successful, high-paying careers in art, often outperforming many other roles in the company. As someone without any creative background, my first instinct was to ask: is there really a difference between those high-caliber artists and “just good ones”? More experienced colleagues actually pointed out the nuances for me: composition, anatomy, stylistic cohesion, other details I wouldn’t have noticed on my own. And even that, they said, was just scratching the surface.</p>\n<p>But the caveat is, that it’s nearly impossible to move up the ranks in a corporate environment by focusing solely on hands-on work. Advancement requires stepping into leadership and scaling the process. This transition can be especially tough in creative fields. Unlike engineering, where senior ICs and managers can and often do stay very close to the code, the general feedback I heard about artists stepping into managerial roles, is that it’s a much more demanding shift with the expense of their own creative involvement.</p>\n<p>En masse, a purely artistic IC role in GameDev is quite often underpaid. The industry heavily relies on using highly visible impact of art and internal appeal of a creative space as alluring non-monetary benefit.</p>\n<p>There’s a popular career tip: when you join a new company, figure out what people are getting promoted for. During my time here, standout promotions and career breakthroughs were often tied to creative wins: a surprisingly successful cosmetic item or a new skin line that went viral. After some thought, I believe that these kinds of successes don’t fit cleanly into the usual “product” or “tech” success definitions of the traditional industries. They belong in their own category, a creative track that’s deeply aligned with the core of game development and it’s creative values.</p>\n<h2 id=\"iii-high-creativity-scope-expectations\">III. High Creativity Scope Expectations<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#iii-high-creativity-scope-expectations\">#</a></h2>\n<p>Being passionate about something is a double-edged sword. If you truly believe in your work, it can greatly elevate your experience, and for many it’s a crucial part of professional life. On the other hand, many people struggle to stay passionate about being creative within tight constraints.</p>\n<p>GameDev industry generates dozens of small and medium sized games daily, but even as a very dedicated player, you are only exposed to a small number of popular titles. Unsurprisingly, the employee experience is quite similar. There’s a good chance that you will end up working on something that you, as a gamer, would never play.</p>\n<p>It’s an extremely common story, when someone with lots of experience, maybe even at a tech lead or managerial level in a small company, joins a FAANG or Big Tech firm, only to find immense disappointment because they now work on a very limited scope in a remote corner of the organization.</p>\n<p>Now multiply that feeling by 20 for people in creative industries, who must work within the tightly defined and specific context of a game and its established style. Many expect to design new systems from scratch, drive art direction, and be praised for breakthroughs. But in large organizations, it’s pretty much expected that you’ll be pigeonholed into a narrow area. Very few dream of working on the 50th swipe animation in a match-3 game or arranging the layout of a store in yet another gacha.</p>\n<p>A very common trajectory of a creative IC I’ve repeatedly seen, even during my relatively short tenure, is a quick change from the excitement of joining a team with a popular game to frustration with the limited creative scope, further narrowed by corporate politics and stack of management. In the end, it was often the reason that motivated people to leave for smaller studios or their own indie projects where they have full creative freedom.</p>\n<p>I was primarily talking about artistic craft in this section because, in my experience, that’s where this issue is most visible. But it would be unfair to not mention tech and development. From my experience, this is a significantly smaller issue for developers and the technical side of things, because there are still many small and large unsolved challenges that one person can take on, especially given the immaturity of tools and the complexity of technical systems. And in tech, creativity is valued more as a force multiplier, rather than as a primary driver.</p>\n<h2 id=\"iv-industry-maturity-and-growth\">IV. Industry Maturity And Growth<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#iv-industry-maturity-and-growth\">#</a></h2>\n<p><strong>Game Industry Grew Up (Sort of)</strong></p>\n<p>GameDev tend to distance themselves from other, “more boring” industries. Difference exists even on the terminology level. For example, office is a <em>studio</em>, product manager becomes a <em>producer</em>. But by many measures, video games have become a mature industry, getting very close to becoming a big and boring corporate job, while internally and culturally maintaining a big distance from other fields.</p>\n<p>For years, video games flew under the radar, pulling off things that more regulated industries wouldn’t even dream of: aggressive gacha mechanics, loot boxes, wildly relaxed age ratings, and barely existant regulatory controls.</p>\n<p>Even owning the game is a gray area today, when most of the platforms allow you only to get a license to play a game, or worse — a license to rent in-game items. Even physical copies can’t protect you from servers going dark and blocking you from accessing your game progression and collections.</p>\n<p>Yet despite those shenanigans, the industry’s growth has been steady, positive, and relentless.</p>\n<p><strong>Disconnected Between Internal and External Growths</strong></p>\n<p>Having this image creates an interesting conflict, that I felt sometimes is hard to get a grasp on for people who have been working in GameDev exclusively. Despite being a full-fledged industry by economic metrics, both internally and in the eyes of the general public, GameDev is often seen as a creative space without rigid rules or bureaucracy.</p>\n<p>I worked at a large company by GameDev standards: several thousand employees, multiple international offices. And I’d routinely see teams actively rejecting exiting practices for managing large-scale projects and work. I often felt like saying: “Guys, we’re not working out of someone’s garage anymore.”</p>\n<p>At first, I thought I was the problem. I thought that I needed to adjust, and that the friction I felt was a sign of immaturity on my part. But over time, I connected with few people who had been there for a long time and had previously built successful careers in other industries before moving into GameDev. And they independently echoed exactly the same experience and emotions from their side after working on different projects and teams over their time in the company.</p>\n<p><strong>Need To Get Up To Speed</strong></p>\n<p>Compared to other mature companies, processes in GameDev are far looser. Whenever I heard genuine praises about well-geared processes, It was often accompanied by the story of how they reached this level by going against the established patterns and due to powerful individual initiative rather than from a systematic efforts.</p>\n<p>Historically, that made some sense. Games didn’t deal with things like sensitive data and real money for a very long time, and were not as highly regulated. But that’s no longer true. With modern game practices like online multiplayer, real-money purchases, lootboxes, DLC and in-game content the stakes have changed dramatically.</p>\n<p>Many mature GameDev companies are no longer small teams running on a thin budgets and betting everything on the next hit. They’re established businesses with long-term roadmaps, real revenue, and high expectations. And while many mature industries learned how to scale with success, In GameDev scalable development is still a problem in search of a solution.</p>\n<p>When you mix that chaos with the passion and creativity that drew most people into the industry, you get something volatile: scale problems, career trajectory confusions, and painful process of transforming creative unbound work into mundane daily job.</p>\n<h2 id=\"v-projects-are-long\">V. Projects Are Long<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#v-projects-are-long\">#</a></h2>\n<p>Development of a new AAA game takes about 5-7 years. If things go well.</p>\n<p>Slightly less known metric — creating a single skin (in-game cosmetics like a weapon, outfit, map, car) in a pipeline of AAA game can take up to a year.</p>\n<p>There’s almost no “fail-fast” style in GameDev, that is very common in tech start-up scene. You don’t ship an MVP to first 100 users, gather their feedback, iterate, and scale. Instead, you work towards the final product with full release, event when game earns the bulk of its revenue, momentum, and visibility.</p>\n<p>Interestingly, this is true for both ends of the spectrum of company type and size: both multi-thousand employee industry giants and lean indie studios share extremely similar expectations of 5-7 years per new title.</p>\n<p>In recent years, early access became a bit more popular, and it helps to acquire some funding and build an audience during the final stretch. But it’s significantly more common for indie titles, and usually happens just 1–2 years before release.</p>\n<p>This long-cycle nature of development amplifies everything other difficulty: burnouts, conflicts, passion, and career progression.</p>\n<p>The disconnect between a fast-paced, crunch-heavy environment and projects that span half a decade takes a serious emotional toll.</p>\n<p>Which leads directly to another interesting phenomenon…</p>\n<h2 id=\"vi-releasing-a-game-is-part-of-the-biography\">VI. Releasing a Game is Part of the Biography<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#vi-releasing-a-game-is-part-of-the-biography\">#</a></h2>\n<blockquote>\n<p>Hi, my name is Mike, I’m a game developer, and I’ve worked on Truck Simulator 2, and it’s spin-off Dark Trucks: Shadows, excited to meet you!</p></blockquote>\n<p>— a totally realistic introduction I’ve heard many times during team onboardings and interviews</p>\n<p>When people in GameDev introduce themselves, they often start with the list of games they’ve worked on. The studio or company name can matter less, since those entities can be even more fragile than the actual games.</p>\n<p>This approach actually works well in the industry, since games are public-facing entities and provide an immediate insight into someone’s scope and achievements.</p>\n<p>There is a less obvious flip side of this convenient approach.</p>\n<p>Some of my colleagues with decades of experience have shared unfortunate stories about their peers who have been working in games for a very long time, but because of project cancellations, bureaucracy limbo,  development hell, they never got the chance to actually ship a game.</p>\n<p>That can be a harsh reality check — in an industry where visibility often equals validation, not shipping can put years of work into dead weight on your resume.</p>\n<h2 id=\"vii-technology\">VII. Technology<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#vii-technology\">#</a></h2>\n<p><strong>Mindset and Priorities</strong></p>\n<p>Technology in GameDev is rarely the main focus, and often lags behind the broader tech industry.</p>\n<p>There is a range of reasons for this. Creative aspects will always be a priority, scale of the user base is often smaller, even for big live games, and the error cost is less significant as well. In addition, games remained a boxed product for much longer than other software, live games(games-as-a-service), is still a fairly new model, and the industry keeps figuring it out.</p>\n<p>This sets quite a different set of expectations for development process, more often  cultural, rather than backed up by real industries discrepancies. I’ve often heard the explanation, “That’s just how it’s always been in GameDev”. But nearly every my peer, who came from non-GameDev industry, admitted that this is often an excuse rather than a real unsolvable problem.</p>\n<p>It often leads to unfortunate situations, where industry-wide standard are considered to be redundant, affecting player experience, before anything else.</p>\n<p>I firmly believe that this is not set in stone, and can be changed for better. That said, besides known difficulties, GameDev has a range of interesting areas and unique problems to tackle, that are hard to come by outside of this industry, which often can require more depth than typical enterprise-dev work.</p>\n<p><strong>Tech Art</strong></p>\n<p>Not surprisingly, many of those unique areas are located on the edge the between art and technology.</p>\n<p>There’s a whole speciality that is commonly referred to as tech-art. It’s an umbrella term, and exact specifics highly depend on the company and even the team, but the main part — it’s a bridge between people who explore and create new content, and integration of this content into a game engine.</p>\n<p>More specifically, it can include such things as shader programming, particle systems, model rigging, ray tracing, 3D texturing, performance optimization of visual part of the game, and fitting all those things into memory budgets.</p>\n<p>There are interesting challenges and there is a lot of very specific skills and knowledge involved. During my last year I was often having lunches with a tech art team, and conversations with those folks were making me feel like 1 semester of 3D graphics in uni 10 years ago was definitely not enough to understand finer details of their work.</p>\n<p>This area of expertise is also highly valuable in the movie and entertainment industries, and to some extent in others, where 3D visualization is a first-class feature, though game development is where it gets the most external visibility.</p>\n<p><strong>Content Tools and Pipelines</strong></p>\n<p>There’s an enormous layer of content management tooling and tech.</p>\n<p>I’m talking about plugins for editors and artists tools, content pipelines, content management system tailored to in-house needs. Those things might look less sexy compared to writing shaders or gameplay code, but they are quite impactful, critical for scalability, and very often overlooked.</p>\n<p>Scale that to multiple editors, integrations with game engine tools, dozens of in-house and outsourced artists teams, and multiple games being developed at the same time, and suddenly, you’ve got an entire departments dedicated to support this layer.</p>\n<p>This also puts a lot of pressure on build and CI/CD systems. Building a game from scratch and preparing the content (asset “cooking”) without any additional assistance can easily take a full working day for a big game. To make it practical, there’s a whole world of distributed build systems for both code and content, a lot of engineering effort goes into making the process work for feature teams, content production, and delivering of new iterations of game builds.</p>\n<p><strong>Testing</strong></p>\n<p>Testing is very big in GameDev. While in other industries it’s often delegated to developers and product-management roles, in GameDev testing is a very integral part of the process and no one even begins to talk about fully reducing/automating QA.</p>\n<p>I believe there’s multiple reasons to it.</p>\n<p>Firstly, a lot of QA work is focused on testing graphics and visual content, how things actually look in a game. For many games, in-game content and cosmetics is the main source of the revenue, and naturally it becomes a part that requires a lot of attention.</p>\n<p>Second can be a lack of testing tooling. More experienced folks here might point me to some UE/Unity tooling or automation frameworks, but give it layer or two of in-house customisations, novelty of the tooling in general, and multiple independent platforms, and suddenly manual testing begins to look not that long and expensive.</p>\n<p>I’m not even starting on in-house engines. Those things can vary so much and their tooling can be in any state, from state-of-the art masterpiece to mash of ideas a working together by a pure miracle, and unsurprisingly, it often leans towards the second one.</p>\n<p>I heard from an acquittance who worked in a mobile puzzle games company (match-3, hidden-object, that kind) that they relatively successfully leveraged AI for testing their games, and it worked well due to a more limited scope of the game.</p>\n<p><strong>Hardware &amp; Platforms</strong></p>\n<p>Another interesting perk is that GameDev is demanding on hardware, and most often you’ll have very powerful PC, especially when things come to graphics.</p>\n<p>Speaking of your PC, you are going to work with Windows.</p>\n<p>Despite the perennial “year of the Linux desktop,” Windows platform remains dominant for gaming. From the developer’s perspective it’s the same story — significant part of engines and tools are not expected to work in Linux/MacOS.</p>\n<p>And as you can guess, writing and porting tooling to those systems is also not a very profitable business, and you’ll have tough luck having full-stack experience.  So prepare to learn some win-specific tools if you ever plan to touch the game.</p>\n<h2 id=\"closure\">Closure<a aria-hidden=\"true\" class=\"anchor\" hidden=\"\" href=\"#closure\">#</a></h2>\n<p>Despite my short tenure, I was lucky to be in a place where I could absorb a wide range of experiences from people who have been in this industry for much longer. People who were deeply invested in it, for better or worse.</p>\n<p>There is one thing the gaming industry does exceptionally well — it connects people who are passionate about it, and leverages this passion, making it a reward in itself.</p>\n<p>In GameDev you will find people for whom making games is the main goal in their lives. You will meet those who left traditional industries to finally chase a childhood dream.  You can find yourself hyper-focused on the specific technical challenges you’d never encounter elsewhere. You will witness strange and beautiful blends of tech, art, and storytelling that few industries can offer. You will work with corporate ladder climbers who, despite being skilled at internal politics, still have to collaborate with people unafraid to challenge decisions that conflict with gamers values.</p>\n<p>And you will see a passionate, chaotic industry fighting with the realities of scale, growth pains, and accepting its maturity.</p>\n<p>The same passion that drives innovation and creativity can also create instability, accelerate burnout, and make it challenging to sustain long-term balance, for both individuals and companies.</p>\n<p>It’s a space where hobby and career blur into something messy, sometimes magical, quite often — frustrating. It definitely doesn’t feel like a regular office job. That’s both its greatest strength and its most persistent challenge.</p>\n</div>\n</div></body></html>",
    "summary": "Two And A Half Years In GameDev"
  },
  "2025-07-07-0942-nobodyhasapersonalityanymore": {
    "title": "Nobody Has A Personality Anymore",
    "url": "https://www.freyaindia.co.uk/p/nobody-has-a-personality-anymore",
    "url_hash": "d84f8594",
    "date": "2025-07-07T09:42:07.905830",
    "authors": [],
    "content_html": "<html><body><div><div class=\"body markup\" dir=\"auto\"><p><span>Therapy-speak has taken over our language. It is ruining how we talk about </span><a href=\"https://www.freyaindia.co.uk/p/maybe-youre-not-anxiously-attached\" rel=\"\">romance and relationships</a><span>, narrowing how we think about </span><a href=\"https://www.freyaindia.co.uk/p/a-world-in-upheaval\" rel=\"\">hurt and suffering</a><span>, and now, we are losing the words for who we are. Nobody has a personality anymore. </span></p><p><span>In a therapeutic culture, every personality trait becomes a problem to be solved. Anything too human—every habit, every eccentricity, every feeling too strong—has to be labelled and explained. And this inevitably expands over time, encompassing more and more of us, until nobody is normal. Some say young people are making their disorders their whole personality. No; it’s worse than that. Now they are being taught that their normal personality </span><em>is</em><span> a disorder. According to a 2024 survey, 72% of Gen Z girls </span><a href=\"https://research.skeptic.com/mental-illness-political-ideology-and-holding-false-beliefs\" rel=\"\">said that</a><span> “mental health challenges are an important part of my identity.” Only 27% of Boomer men said the same.</span></p><p>This is part of a deeper instinct in modern life, I think, to explain everything. Psychologically, scientifically, evolutionarily. Everything about us is caused, categorised, and can be corrected. We talk in theories, frameworks, systems, structures, drives, motivations, mechanisms. But in exchange for explanation, we lost mystery, romance, and lately, I think, ourselves.  </p><p>We have lost the sentimental ways we used to describe people. Now you are always late to things not because you are lovably forgetful, not because you are scattered and interesting and secretly loved for never arriving on time, but because of ADHD. You are shy and stare at your feet when people talk to you not because you are your mother’s child, not because you are gentle and sweet and blush the same way she does, but autism. You are the way you are not because you have a soul but because of your symptoms and diagnoses; you are not an amalgam of your ancestors or curious constellation of traits but the clinical result of a timeline of childhood events. Every heartfelt, annoying, interesting piece of you, categorised. The fond ways your family describe you, medicalised. The pieces of us once written into wedding vows, read out in eulogies, remembered with a smile, now live on doctors’ notes and mental health assessments and BetterHelp applications. We are not people anymore. We have been products for a long time, and these are our labels.  </p><p><span>We can’t talk about character either. There are no generous people anymore, only people-pleasers. There are no men or women who wear their hearts on their sleeves, only the anxiously attached, or the co-dependent. There are no hard workers, only the traumatised, the insecure overachievers, the neurotically ambitious. We even classify people without their consent. Now our clumsy mothers have always had </span><a href=\"https://www.tiktok.com/@cobywatts_/video/7027752673134906626\" rel=\"\">undiagnosed ADHD</a><span>; our quiet dads don’t realise </span><a href=\"https://www.tiktok.com/@notjackiestiktok_/video/7232061331212455169?lang=en\" rel=\"\">they are autistic</a><span>; our stoic grandfathers are emotionally stunted. We even helpfully </span><a href=\"https://embrace-autism.com/autistic-women-in-history/\" rel=\"\">diagnose the dead</a><span>. And I think this is why people get so defensive of these diagnoses, so insistent that they explain everything. They are trying to hold onto themselves; every piece of their personality is contained within them.  </span></p><p><span>And it’s not only personality traits we have lost. There are no experiences anymore, no phases or seasons of life, no wonders or mysteries, only clues about what could be wrong with us. Everything that happens can be explained away; nothing is exempt. We can’t accept that we love someone, madly and illogically; no, the enlightened way to think is to see through that, get down to what is really going on, find the hidden motives. Who we fall for is nothing but a trauma response. “</span><a href=\"https://x.com/blcksmthdesign/status/1298677356802871301\" rel=\"\">You don’t have a crush; you have attachment issues</a><span>”. Maybe he reminds you of an </span><a href=\"https://www.freyaindia.co.uk/p/risk-aversion-is-killing-romance\" rel=\"\">early caregiver who wounded you</a><span>. In fact there are no feelings at all anymore; only </span><a href=\"https://x.com/AdamLaneSmith/status/1919868617211908218\" rel=\"\">dysregulated nervous systems</a><span>. Every human experience we have is evidence, and the purpose of our lives is to piece it all perfectly together. This is the </span><em>healthy </em><span>way to think, that previous generations were so cruelly deprived of. </span></p><p><span>I’m not sure I believe this anymore. That we are more enlightened now than in the past, more emotionally intelligent. My grandma is a grandma, a mother, a wife; we are attachment disorders. She is selfless and takes things to heart; we have </span><a href=\"https://www.webmd.com/add-adhd/rejection-sensitive-dysphoria\" rel=\"\">rejection sensitive dysphoria</a><span> and </span><a href=\"https://psychcentral.com/health/fawn-response\" rel=\"\">fawn as a trauma response</a><span>. They are souls; we are symptoms. Of course there were people in the past who needed real help and never received any sort of understanding, but that is not the full story; many were also happier, less self-conscious, actually able to forget themselves. I asked my grandparents who have been married for six decades why they chose each other and got a clumsy answer. They had never really thought about it. Maybe I am too nostalgic about the past, but there is something there that has been lost, that in that moment I struggled to relate to, a simpler way of living. And an arrogance to us now, seeing people in the past as incomplete and unsolved, when we are this anxious and confused.</span></p><p><span>I think this is why my generation gets stuck on things like relationships and parenthood. The commitments we stumble over, the decisions we endlessly debate, the traditions we find hard to hold onto, are often the ones we can’t easily explain. We are trying to explain the inexplicable. It’s hard to defend romantic love against staying single because it isn’t safe or controllable or particularly rational. The same with having children. Put these things in a </span><a href=\"https://www.nbcnews.com/pop-culture/viral/tiktok-girl-with-the-list-pregnancy-birth-rcna66810\" rel=\"\">pro-con list</a><span> and they stop making logical sense. They cannot be calculated or codified. Ask older generations why they started families. Often they didn’t really think it through. And maybe that isn’t as crazy as we have been led to believe, maybe that isn’t so reckless, maybe there’s something human in that. </span></p><p><span>But of course this generation has a </span><a href=\"https://www.statista.com/outlook/hmo/mental-health/worldwide\" rel=\"\">billion-dollar industry</a><span> involved that wasn’t before. The world is also becoming more complicated; we want control and certainty. We take comfort in the causes of things. And yes there are young people helped by diagnoses, who can’t function and find relief in being understood, but fewer than we think. Many more have been convinced that the point of life is to classify and explain everything, and it’s making them miserable. </span></p><p><span>I find it strange that we think this is freeing, this brutal knowing. That this self-surveillance is the liberated way to live. That we are somehow </span><em>less</em><span> repressed, being boxed in by medical labels. There are young people spending the most carefree years of their lives mapping themselves out, categorising themselves for companies and advertisers. So much of their thinking is consumed by this. They don’t have memories anymore; only evidence, explanations, timelines of trauma. They don’t have relationships; only attachment figures, caregivers and co-regulators. And I think this is it, the cause of so much misery. We taught a generation that the meaning of life is not found outside in the world but inside their own heads. We underestimate it, this miserable business of understanding ourselves. I feel for the girls forensically analysing their childhoods while they are still in them, cramming their hope and pain and suffering into categories, reducing themselves down to trauma responses. It hurts to see this heartbreaking awareness we have inflicted on a generation, whose </span><a href=\"https://www.freyaindia.co.uk/p/our-new-religion-isnt-enough\" rel=\"\">only understanding</a><span> of the world is this militant searching, this reaching around for reasons. God, the life they are missing. </span></p><p><span>Because we can’t ever explain everything. At some point we have to stop analysing and seeing through things and accept the unknowable. All we can ever really achieve </span><a href=\"https://www.freyaindia.co.uk/p/why-we-doubt-everything\" rel=\"\">is faith</a><span>. Some humour at ourselves, too. It’s impossible to heal from being human, and this is why the mental health industry has infinite demand. Explain anything long enough and you will find a pathology; dig deep enough and you will disappear.  </span></p><p><span>We keep being told that the bravest thing now is to </span><em>do the work.</em><span> But I think it takes courage </span><em>not</em><span> to explain everything, to release control, to resist that impulse to turn inwards. And wisdom too, to accept that we will never understand ourselves through anything other than how we act, how we live, and how we treat other people. We are thinking about ourselves enough. We don’t need more awareness or answers. My worry is that after a lifetime spent trying to explain themselves, solve their strong feelings, standardise their personalities, and make sense of every experience, a generation might realise that the only problem they had, all along, was being human. </span></p><p>So free yourself to experience, not explain. Be brave enough to be normal. Do not offer up your feelings and decisions and memories to the intrusion of the market, to the interpretation of experts, to be filed as deviations from what the medical industry decides is healthy. Leave yourself unsolved. Who knows; it’s a mystery. Written in the stars. From somewhere unknown. Holding on to your personality is a declaration that you are human. A person, not a product. No other explanation needed. </p><p></p></div></div></body></html>",
    "summary": "Nobody Has A Personality Anymore"
  },
  "2025-07-08-1601-rrreplicatesvgrepeatedlinepatterngenerator": {
    "title": "rrreplicate: SVG repeated line pattern generator",
    "url": "https://www.fffuel.co/rrreplicate/",
    "url_hash": "a0af5d68",
    "date": "2025-07-08T16:01:16.693139",
    "authors": [],
    "content_html": "<html><body><div><div class=\"text-left md:text-2xl\"><p>📐 A simple SVG background pattern generator to make cool-looking line patterns. 😎 The generated patterns can be used in your designs to add texture and style to elements on a page.</p><p>Just select a number of different patterns to include out of 4 possible patterns, and then tweak the settings for each of the active patterns. Finally, you can tweak the overall settings for the generated pattern like its overall rotation, scale, pattern size,...</p><p>🦄 Behind the scenes, these patterns are created using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Patterns\">SVG pattern element</a>.</p></div></div></body></html>",
    "summary": "rrreplicate: SVG repeated line pattern generator"
  },
  "2025-07-11-0639-3addingpart1andmrfibonacci": {
    "title": "3. Adding (Part 1) and Mr Fibonacci",
    "url": "https://graphicallinearalgebra.net/2015/04/26/adding-part-1-and-mr-fibonacci/",
    "url_hash": "a581d507",
    "date": "2025-07-11T06:39:34.001938",
    "authors": [],
    "content_html": "<html><body><div><div class=\"entry-content\">\n<p>Probably one of your first experiences with maths was <em>adding</em>. The very first experience was probably learning to count: <span>1</span>, <span>2</span>, <span>3</span>,  and so on. Graphical linear algebra has interesting things to say about counting, but that story will have to wait for <a href=\"https://graphicallinearalgebra.net/2015/05/16/natural-numbers-diagrammatically/\">another time.</a></p>\n<p>Learning about adding coincides with learning about mathematical formulas such as</p>\n<p id=\"one\"><span>3 + 4 = 7</span>     ①</p>\n<p>Three plus four equals seven. If you have three apples and I give you four more apples, how many apples do you have?</p>\n<p>Let’s talk a bit about the formula  <a href=\"#one\">①</a>. You’ve seen equations like this so many times that you are totally comfortable with it and have internalised all of the concepts. You don’t even remember <strong>not understanding it</strong>, right? Even the people who <a href=\"http://www2.ljworld.com/news/2005/aug/17/poll_shows_americas_lovehate_relationship_math/\">hate maths</a> learn this stuff before they learn to hate it.</p>\n<p>But appearances deceive, and <a href=\"#one\">①</a> is actually quite subtle. Before we go any further, let’s talk about the symbols involved. First, ‘<span>+’</span> is an <em>operation</em>. The left hand side of equation <a href=\"#one\">①</a>, the stuff to the left of the symbol ‘<span>=’</span>, can be understood as a <em>procedure</em>, a computation. It’s the processing that you did with your fingers when the teacher was talking about apples.</p>\n<p>The symbol ‘<span>+</span>’ is the name of the procedure, and it takes two <em>arguments:</em> here the numbers <span>3</span> and <span>4</span>. The first argument is <span>3</span>, the second argument is <span>4</span>. The right hand side of <a href=\"#one\">①</a>, <span>7</span>, is the <em>result</em> of the computation. So we can understand the symbol ‘<span>=</span>’ as saying to us “the result of the the computation on the left of me is the thing on the right of me”.</p>\n<p>But then maybe the teacher wrote</p>\n<p id=\"two\"> <span>7 = 3+4</span>     ②</p>\n<p>and confused you: in <a href=\"#two\">②</a> the computation is on the right and the result is on the left! You probably went on to become a professor of Computer Science. You like to keep your inputs on the left and your outputs on the right. Please stay with us, because in graphical linear algebra the relationship between <a href=\"#one\">①</a> and <a href=\"#two\">②</a> is extremely important and we will spend <strong>a lot</strong> of time discussing it. Technically speaking, this is because ‘<span>=</span>’ defines a <a href=\"https://en.wikipedia.org/wiki/Binary_relation\">relation</a>, and relations will be vital for us.</p>\n<p>For now, let’s forget about the advanced topic of <a href=\"#two\">②</a>. We will first concentrate on trying to get our heads around <a href=\"#one\">①</a>. Actually, there are several ways to understand <a href=\"#one\">①</a>. In graphical linear algebra we will understand it in two ways. In this episode, we are going to talk about the first of those two ways.</p>\n<p>As you already know, in this blog we try to <a href=\"https://graphicallinearalgebra.net/2015/04/24/methodology-handwaving-and-diagrams/\" title=\"Methodology, Handwaving, and Diagrams\">avoid writing equations</a> like <a href=\"#one\">①</a> and <a href=\"#two\">②</a>. Equations are so last century and now it’s high time for our first diagram. We will draw ‘<span>+’</span> as a white circle. The two arguments come in from the left, the first through the top arrow, the second through the bottom. The result then comes out on the right. <a href=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/blog2.gif\"><img alt=\"blog\" class=\"size-medium wp-image-237 aligncenter\" data-attachment-id=\"237\" data-comments-opened=\"1\" data-image-caption=\"\" data-image-description=\"\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"blog\" data-large-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/blog2.gif?w=1008\" data-medium-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/blog2.gif?w=300\" data-orig-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/blog2.gif\" data-orig-size=\"1444,744\" data-permalink=\"https://graphicallinearalgebra.net/2015/04/26/adding-part-1-and-mr-fibonacci/blog-3/#main\" sizes=\"(max-width: 300px) 100vw, 300px\" src=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/blog2.gif?w=300&amp;h=155\" srcset=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/blog2.gif?w=300 300w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/blog2.gif?w=600 600w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/blog2.gif?w=150 150w\"/></a> Because the word “arrow” is boring, generic and overused, we will call the lines “wires”. The word “wire” is quite evocative: data travels on wires all around us. For example, wires are carrying bits of information to and from your wireless router as you read this.</p>\n<p>Go ahead and imagine numbers moving on the wires, going in the directions indicated by the arrow-heads. When a <span>3</span> arrives on the first argument wire, and a <span>4</span> arrives on the second argument wire, a <span>7</span> will exit on the result wire. <a href=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/3plus4.gif\"><img alt=\"3plus4\" class=\"size-medium wp-image-242 aligncenter\" data-attachment-id=\"242\" data-comments-opened=\"1\" data-image-caption=\"\" data-image-description=\"\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"3plus4\" data-large-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/3plus4.gif?w=1008\" data-medium-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/3plus4.gif?w=300\" data-orig-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/3plus4.gif\" data-orig-size=\"1294,744\" data-permalink=\"https://graphicallinearalgebra.net/2015/04/26/adding-part-1-and-mr-fibonacci/3plus4/#main\" sizes=\"(max-width: 300px) 100vw, 300px\" src=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/3plus4.gif?w=300&amp;h=172\" srcset=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/3plus4.gif?w=300 300w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/3plus4.gif?w=598 598w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/3plus4.gif?w=150 150w\"/></a>Similarly, if <span>43</span> arrives on the first argument wire and <span>57</span> arrives on the second argument wire, <span>100</span> will exit on the result wire. <a href=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/fortythreeplusfiftyseven.gif\"><img alt=\"fortythreeplusfiftyseven\" class=\"size-medium wp-image-243 aligncenter\" data-attachment-id=\"243\" data-comments-opened=\"1\" data-image-caption=\"\" data-image-description=\"\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"fortythreeplusfiftyseven\" data-large-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/fortythreeplusfiftyseven.gif?w=1008\" data-medium-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/fortythreeplusfiftyseven.gif?w=300\" data-orig-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/fortythreeplusfiftyseven.gif\" data-orig-size=\"1349,744\" data-permalink=\"https://graphicallinearalgebra.net/2015/04/26/adding-part-1-and-mr-fibonacci/fortythreeplusfiftyseven/#main\" sizes=\"(max-width: 300px) 100vw, 300px\" src=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/fortythreeplusfiftyseven.gif?w=300&amp;h=165\" srcset=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/fortythreeplusfiftyseven.gif?w=300 300w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/fortythreeplusfiftyseven.gif?w=598 598w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/fortythreeplusfiftyseven.gif?w=150 150w\"/></a> Easy enough, right?</p>\n<hr/>\n<p> </p>\n<p>Mathematicians don’t usually talk about the symbols they use. Part of the “fun” of being a mathematics undergraduate is learning a foreign language that no one actually bothers to teach you explicitly. You’re supposed to just assimilate it, as if it were something as natural as the concepts it describes.</p>\n<p>To be fair, mathematicians have had hundreds of years to find efficient ways to write about the concepts they love. I mean, as much as we diss formulas in this blog, let’s admit that <span>43 + 57 = 100</span> is fairly short and concise. It wasn’t <a href=\"http://en.wikipedia.org/wiki/History_of_mathematical_notation\">always like this</a>. We have some nice, efficient, ways of doing the actual calculation too: remember you draw the second argument below the first, carefully so that the digits line up from right to left, then you draw a line below, etc. You know the procedure; just don’t forget to carry the <span>1</span>. <a href=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/addalg.gif\"><img alt=\"addalg\" class=\"wp-image-245 aligncenter\" data-attachment-id=\"245\" data-comments-opened=\"1\" data-image-caption=\"\" data-image-description=\"\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"addalg\" data-large-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/addalg.gif?w=338\" data-medium-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/addalg.gif?w=244\" data-orig-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/addalg.gif\" data-orig-size=\"338,416\" data-permalink=\"https://graphicallinearalgebra.net/2015/04/26/adding-part-1-and-mr-fibonacci/addalg/#main\" loading=\"lazy\" sizes=\"(max-width: 142px) 100vw, 142px\" src=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/addalg.gif?w=142&amp;h=175\" srcset=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/addalg.gif?w=244 244w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/addalg.gif?w=142 142w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/addalg.gif?w=284 284w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/addalg.gif?w=122 122w\"/></a> It wasn’t <a href=\"http://www.storyofmathematics.com/roman.html\">always</a> like this. Thank <a href=\"http://en.wikipedia.org/wiki/Fibonacci\">Fibonacci</a>. When people hear this name, they usually think of the Fibonacci number sequence <span>0, 1, 1, 2, 3, 5, 8, …</span>. Don’t worry if you’ve never heard of it: we will eventually explain this famous stream of numbers using graphical linear algebra. For now, I want to try to convince you that this sequence was not Fibonacci’s greatest contribution to civilisation.</p>\n<p>Some context: Fibonacci came from a wealthy trading family of the 12<sup>th</sup> century medieval merchant republic of Pisa. Pisa was one of the world’s richest cities back then — if you’ve ever visited <a href=\"http://en.wikipedia.org/wiki/Piazza_dei_Miracoli\">Piazza dei Miracoli</a> in Pisa then you’ve seen the splendour first hand. Back then, much of the rest of Europe consisted of wooden shacks.</p>\n<p>When Fibonacci was a boy he travelled with his dad to trading posts in North Africa, where he played with the kids of local merchants and learned about the Hindu-Arabic positional number system that we still use today. Europeans, back then, used Roman numerals: <span>I</span>, <span>II</span>, <span>III</span>, <span>IV</span>, <span>V</span>, and so on. As an exercise, let’s try to use the clever technique that we know for adding, but using Roman numerals. It doesn’t work.</p>\n<p><a href=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/roman.gif\"><img alt=\"roman\" class=\"alignnone wp-image-259\" data-attachment-id=\"259\" data-comments-opened=\"1\" data-image-caption=\"\" data-image-description=\"\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"roman\" data-large-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/roman.gif?w=344\" data-medium-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/roman.gif?w=300\" data-orig-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/roman.gif\" data-orig-size=\"344,344\" data-permalink=\"https://graphicallinearalgebra.net/2015/04/26/adding-part-1-and-mr-fibonacci/roman/#main\" loading=\"lazy\" sizes=\"(max-width: 168px) 100vw, 168px\" src=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/roman.gif?w=168&amp;h=168\" srcset=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/roman.gif?w=300 300w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/roman.gif?w=168 168w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/roman.gif?w=336 336w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/roman.gif?w=150 150w\"/></a></p>\n<p>Romans were great at so many things, but their number system sucked. I’m sure that even <a href=\"http://en.wikipedia.org/wiki/Cicero\">Cicero</a>, a great Roman patriot, would agree given the evidence.</p>\n<p>Anyway, Fibonacci realised how great the Hindu-Arabic number system was and wrote a book about it, the <a href=\"http://en.wikipedia.org/wiki/Liber_Abaci\">Liber Abaci</a>. To Fibonacci, the superiority of a positional number system was obvious: calculation was so much easier, more efficient, less prone to error. It is also obvious to us <strong>now</strong>, of course.</p>\n<p>In Fibonacci’s day, he did manage to convince some people, who became known as the <em><a href=\"http://en.wikipedia.org/wiki/Algorism\">algorists</a></em>. The conservatives, those who preferred to stick with the status quo, were called <em>abacists</em>. They used the abacus, and converted to and from the Roman number system between calculations. The conservatives won the day: it took a long, long time before Fibonacci’s convictions became more widespread. In fact, the conversion from Roman to Arabic only finished towards the end of the 16<sup>th</sup> century, 400 (!) years after the publication of Liber Abaci.</p>\n<hr id=\"rcrp\"/>\n<p> </p>\n<p>I’m sure that Fibonacci would have had problems with the <a href=\"http://www.rcuk.ac.uk/innovation/impacts/\">Pathways to Impact</a> document. Although “Pathways to Impact” sounds like a Hollywood disaster movie, it is actually a document that all UK scientists have to include with their grant applications. You have to write on two A4 pages how your research will impact society and academia, but mainly how it will impact the economy.</p>\n<p>For fun, let’s suppose that Fibonacci had access to a time capsule and saw how his ideas would transform the Western world. Let’s suppose even that his grant application made it to the interview round, held in a beautiful palazzo on the <a href=\"http://en.wikipedia.org/wiki/Knights'_Square_(Pisa)\">Piazza dei Cavalieri</a>.</p>\n<p>“Mr Fibonacci, we asked you very clearly to provide us an Impact Statement about how your so-called ‘Arabic numerals’ will impact the Pisan economy in the 5-10 year period. All of our greatest merchants use the abacus. I don’t see how this technology will bring them any competitive advantage. In fact, all of this ‘positional number system’ nonsense sounds a bit abstract and useless to us. I mean, you expect us to wait 400 years to make a profit on this? Are you insane?”</p>\n<p>The wise heads of the Research Council of the Republic of Pisa (RCRP) then nodded politely as Mr Fibonacci tried to explain, but after a short panel discussion they ended up investing tax-payers’ money in advanced abacus technology instead. Fair enough, they were right. The glorious Pisan republic ended in early 15th century, when Pisa fell under Florentine domination. Obviously the key stakeholders of RCRP couldn’t be expected to wait 400 years to see their investment bear fruit.</p>\n<p>Seriously though, the Republic of Pisa actually treated Fibonacci very well. With such poor economic decisions, no wonder that they eventually lost out to Florence.</p>\n<hr/>\n<p> </p>\n<p>Our graphical notation can be a little bit more concise: the diagrams we have been drawing so far have some redundant information that we can throw away safely, without losing anything important. It is usually good to throw away redundant things. And it makes sense to do this now, because we will be drawing a lot of diagrams.</p>\n<p>Remember, the numbers travel on wires from left to right. So the arrowheads are redundant. Also, we will not write the <span>+</span> symbol inside the circle from now on. Whenever you see a white circle in a diagram on this blog, it will always mean adding. <a href=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/notation.gif\"><img alt=\"notation\" class=\"wp-image-264 aligncenter\" data-attachment-id=\"264\" data-comments-opened=\"1\" data-image-caption=\"\" data-image-description=\"\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"notation\" data-large-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/notation.gif?w=1008\" data-medium-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/notation.gif?w=300\" data-orig-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/notation.gif\" data-orig-size=\"3005,644\" data-permalink=\"https://graphicallinearalgebra.net/2015/04/26/adding-part-1-and-mr-fibonacci/notation/#main\" loading=\"lazy\" sizes=\"(max-width: 605px) 100vw, 605px\" src=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/notation.gif?w=605&amp;h=129\" srcset=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/notation.gif?w=300 300w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/notation.gif?w=602 602w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/notation.gif?w=1204 1204w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/notation.gif?w=150 150w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/notation.gif?w=768 768w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/notation.gif?w=1024 1024w\"/></a> Actually, by throwing away the arrowheads I’m also doing something a little bit underhanded here. I’m preparing us for the second way of understanding the addition operation, that will help us to solve the mystery of passing between <a href=\"#one\">①</a> and <a href=\"#two\">②</a>. Throwing away arrowheads seems to be in the air at the moment, many people are doing it. We will discuss all of that in more detail in a <a href=\"https://graphicallinearalgebra.net/2015/08/04/causality-feedback-and-relations/\">later episode</a>.</p>\n<p>It’s time for our first equation. You may remember an interesting thing about adding. If I try to calculate <span>3 + 4</span> and I don’t make any mistakes, I will get the same result as when I calculate <span>4 + 3</span>. In fact, if I use <span>x</span> and <span>y</span>  as <em>variables</em>, to stand for any two numbers, then a mathematician might write:</p>\n<p id=\"three\"><span>∀ x,y.  x + y = y + x</span>      ③</p>\n<p>The upside down A means “for all”. So <a href=\"#three\">③</a> simply says that it is the case that for <strong>all possible</strong> choices of assigning numbers to <span>x</span> and <span>y</span>, say <span>x = 42</span> and <span>y = 24</span>, or <span>x = 43</span> and <span>y = 57</span>, or <span>x = 3</span> and <span>y = 4</span>, we know that the calculations <span>x + y</span> and <span>y + x</span> will have the same result. This property is known as<em> commutativity</em> of addition.</p>\n<p>Here’s how we can express the same thing as <a href=\"#three\">③</a> with diagrams. “Comm” is short for “commutativity”. <a href=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/commutativity1.gif\" id=\"comm\"><img alt=\"commutativity\" class=\"wp-image-276 aligncenter\" data-attachment-id=\"276\" data-comments-opened=\"1\" data-image-caption=\"\" data-image-description=\"\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"commutativity\" data-large-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/commutativity1.gif?w=1008\" data-medium-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/commutativity1.gif?w=300\" data-orig-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/commutativity1.gif\" data-orig-size=\"2761,511\" data-permalink=\"https://graphicallinearalgebra.net/2015/04/26/adding-part-1-and-mr-fibonacci/commutativity-2/#main\" loading=\"lazy\" sizes=\"(max-width: 563px) 100vw, 563px\" src=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/commutativity1.gif?w=563&amp;h=105\" srcset=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/commutativity1.gif?w=300 300w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/commutativity1.gif?w=563 563w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/commutativity1.gif?w=1126 1126w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/commutativity1.gif?w=150 150w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/commutativity1.gif?w=768 768w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/commutativity1.gif?w=1024 1024w\"/></a> Before I explain any further, I want you to imagine a white square of paper. Imagine the square to be exactly the right size so that when I cover either of the two diagrams in <a href=\"#comm\">(Comm)</a>, I get two pictures that both look the same: something like an electric plug. <a href=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/box.gif\"><img alt=\"box\" class=\"size-medium wp-image-332 aligncenter\" data-attachment-id=\"332\" data-comments-opened=\"1\" data-image-caption=\"\" data-image-description=\"\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"box\" data-large-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/box.gif?w=1008\" data-medium-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/box.gif?w=300\" data-orig-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/box.gif\" data-orig-size=\"1027,555\" data-permalink=\"https://graphicallinearalgebra.net/2015/04/26/adding-part-1-and-mr-fibonacci/box/#main\" loading=\"lazy\" sizes=\"(max-width: 300px) 100vw, 300px\" src=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/box.gif?w=300&amp;h=162\" srcset=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/box.gif?w=300 300w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/box.gif?w=600 600w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/box.gif?w=150 150w\"/></a> In particular, notice that the parts that are still uncovered are parts where the two diagrams agree — both the diagrams in <a href=\"#comm\">(Comm)</a> have their <em>dangling wires </em>in the same places. Dangling wires are wires in which one of the two ends is not connected to anything. In both of the <a href=\"#comm\">(Comm)</a> diagrams two wires are dangling on the left, and one wire is dangling on the right.</p>\n<p>This brings me to an <strong>important principle of graphical linear algebra</strong>: whenever we write an equation between two diagrams, the number of dangling wires on the left and on the right will be the same. By the way, there will never be any dangling wires on the top or on the bottom. Maybe there will be no dangling wires at all, but if there are some, they must dangle from the left, from the right, or from both left and right.</p>\n<p>So why is <a href=\"#comm\">(Comm)</a> correct? Let’s see what happens when we provide some arguments. We could try to feed in some numbers to convince ourselves, but maybe we’d get lucky and convince ourselves of something that is false. Like, for example, it happens to be the case that <span>2 + 2 = 2 × 2</span> but it’s not the case that for all possible choices of <span>x</span> and <span>y</span> we have <span>x + y = x × y</span>. Right? Letting <span>x = 3</span> and <span>y = 5</span>, <span>3 + 5 = 8</span> but <span>3 × 5 = 15</span>. So let’s use variables instead. We’ve already seen that. <a href=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/xy.gif\"><img alt=\"x+y\" class=\"size-medium wp-image-376 aligncenter\" data-attachment-id=\"376\" data-comments-opened=\"1\" data-image-caption=\"\" data-image-description=\"\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"x+y\" data-large-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/xy.gif?w=988\" data-medium-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/xy.gif?w=300\" data-orig-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/xy.gif\" data-orig-size=\"988,572\" data-permalink=\"https://graphicallinearalgebra.net/2015/04/26/adding-part-1-and-mr-fibonacci/xy/#main\" loading=\"lazy\" sizes=\"(max-width: 300px) 100vw, 300px\" src=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/xy.gif?w=300&amp;h=174\" srcset=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/xy.gif?w=300 300w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/xy.gif?w=600 600w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/xy.gif?w=150 150w\"/></a> For the right hand side of <a href=\"#comm\">(Comm)</a>, notice that the value of the first dangling wire on the left is actually connected as the second argument to addition. So we get. <a href=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/yx.gif\"><img alt=\"y+x\" class=\"size-medium wp-image-377 aligncenter\" data-attachment-id=\"377\" data-comments-opened=\"1\" data-image-caption=\"\" data-image-description=\"\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"y+x\" data-large-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/yx.gif?w=1008\" data-medium-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/yx.gif?w=300\" data-orig-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/yx.gif\" data-orig-size=\"1127,572\" data-permalink=\"https://graphicallinearalgebra.net/2015/04/26/adding-part-1-and-mr-fibonacci/yx/#main\" loading=\"lazy\" sizes=\"(max-width: 300px) 100vw, 300px\" src=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/yx.gif?w=300&amp;h=152\" srcset=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/yx.gif?w=300 300w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/yx.gif?w=600 600w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/yx.gif?w=150 150w\"/></a> But we know that addition is special and it satisfies the commutativity property. So even if we “can’t see inside” the two diagrams any more, for example if we cover them up with a big white square so that they both look like <a href=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/box.gif\"><img alt=\"box\" class=\"size-medium wp-image-332 aligncenter\" data-attachment-id=\"332\" data-comments-opened=\"1\" data-image-caption=\"\" data-image-description=\"\" data-image-meta='{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}' data-image-title=\"box\" data-large-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/box.gif?w=1008\" data-medium-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/box.gif?w=300\" data-orig-file=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/box.gif\" data-orig-size=\"1027,555\" data-permalink=\"https://graphicallinearalgebra.net/2015/04/26/adding-part-1-and-mr-fibonacci/box/#main\" loading=\"lazy\" sizes=\"(max-width: 300px) 100vw, 300px\" src=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/box.gif?w=300&amp;h=162\" srcset=\"https://graphicallinearalgebra.net/wp-content/uploads/2015/04/box.gif?w=300 300w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/box.gif?w=600 600w, https://graphicallinearalgebra.net/wp-content/uploads/2015/04/box.gif?w=150 150w\"/></a> we know that their <strong>behaviour</strong> is the same. The anonymous white box, in each of the two cases, simply adds the two arguments provided on the left and spits out the result on the right.</p>\n<hr/>\n<p> </p>\n<p>Look again at <a href=\"#three\">③</a> and look at <a href=\"#comm\">(Comm)</a>. Which one do you prefer? If you say <a href=\"#three\">③</a> then that’s cool. I will give you many more reasons to love <a href=\"#comm\">(Comm)</a>. For now, the reasons are mainly aesthetic. For example, we don’t need to introduce any upside down letters in <a href=\"#comm\">(Comm)</a>, nor learn how to use them in practice.</p>\n<p>If you are confused, don’t worry. I still need to explain a bit more about what diagrams are exactly, and how we construct them. What kind of things we can and can’t do with them. The rules of the game. You already know one, the one about having the same number of dangling wires in equations. The rules of the game are the subject of the next episode. If you’ve ever played with Lego, it should be smooth sailing.</p>\n<p>Continue reading with <a href=\"https://graphicallinearalgebra.net/2015/04/29/dumbing-down-magic-lego-and-the-rules-of-the-game-part-1/\" title=\"Dumbing Down, Magic Lego and The Rules of the Game (Part 1)\">Episode 4: Dumbing Down and Magic Lego</a>.</p>\n<p id=\"atatags-370373-6870ac02a7d0e\">\n</p><span id=\"wordads-inline-marker\"></span> </div>\n</div></body></html>",
    "summary": "3. Adding (Part 1) and Mr Fibonacci"
  },
  "2025-07-13-2037-mostpeoplewhobuyyourgamewontplayit": {
    "title": "Most people who buy your game won’t play it",
    "url": "https://howtomarketagame.com/2025/06/03/most-people-who-buy-your-game-wont-play-it/",
    "url_hash": "e5ea57af",
    "date": "2025-07-13T20:37:25.336411",
    "authors": [],
    "content_html": "<html><body><div><div class=\"twp-article-wrapper clearfix\">\n<p class=\"image-full\"></p>\n<p>The amazing thing about Steam and its player base is that they buy games they aren’t going to play. More than likely the person buying your game is not going to play it. </p>\n<p>In today’ blog I am going to deep dive on how Steam players actually behave which hopefully makes you less anxious about selling your game. </p>\n<p>Let’s start with this famous quote from Reed Hastings the co-founder of Netflix. It goes like this:</p>\n<figure class=\"wp-block-image size-full\"><img alt=\"\" class=\"wp-image-4780\" decoding=\"async\" loading=\"lazy\" sizes=\"auto, (max-width: 750px) 100vw, 750px\" src=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image.png\" srcset=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image.png 750w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-300x169.png 300w\"/></figure>\n<p>“We compete with (and lose to) Fortnite more than HBO there are thousands of competitors in this highly fragmented market vying to entertain consumers… Our growth is based on how good our experience is, compared to all the other screen time experiences from which consumers choose.” <a href=\"https://www.gamesindustry.biz/netflix-we-compete-with-and-lose-to-fortnite-more-than-hbo\">Read the article here</a></p>\n<p>And then there is this other similar comment….</p>\n<p>“You know, think about it, when you watch a show from Netflix and you get addicted to it, you stay up late at night. We’re competing with sleep, on the margin. And so, it’s a very large pool of time.” <a href=\"https://www.theguardian.com/technology/2017/apr/18/netflix-competitor-sleep-uber-facebook\">Read the article here. </a></p>\n<p><em>Side note: Netflix is being dramatic for marketing effect and make them seem more important in the eyes of shareholders.</em></p>\n<p>Now you are reading these quotes, developing your game, hoping that it will sell well, and you might fear that if Nextflix, Fortnite, and sleep are all competing for a person’s time, how are you, tiny indie, possibly going to steal an hour away from these giants? </p>\n<p>But the reason Steam makes indies so much money compared to all the other platforms is that they have built up an audience that is full of super die hard hobbyists. And by definition a hobbyist is someone who is very interested in a subject and doesn’t worry about how much money they are spending on it. </p>\n<p>Basically, hobbyists buy stuff not because they actually want to consume it, but because they are collecting it. </p>\n<p>Let me explain.</p>\n<p>I like to search random hobbyist subreddits and search “pile of shame.”</p>\n<p><a href=\"https://www.reddit.com/r/lego/comments/12en3rz/pile_of_shame/\">Here is a Lego pile of shame</a>. The guy posting it asked “Here’s a question: what set would you say I should NOT build and why?”</p>\n<figure class=\"wp-block-image size-large\"><img alt=\"\" class=\"wp-image-4781\" decoding=\"async\" loading=\"lazy\" sizes=\"auto, (max-width: 768px) 100vw, 768px\" src=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-1-768x1024.png\" srcset=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-1-768x1024.png 768w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-1-225x300.png 225w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-1.png 1080w\"/></figure>\n<p>On the Warhammer subreddit, <a href=\"https://www.reddit.com/r/Warhammer/comments/1htuz7w/pile_of_shame/\">someone posted their pile of shame</a> and said “This is the year to work on the pile. And this isn’t even counting all my completed models waiting for paint.” </p>\n<figure class=\"wp-block-image size-large\"><img alt=\"\" class=\"wp-image-4782\" decoding=\"async\" loading=\"lazy\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\" src=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-2-1024x768.png\" srcset=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-2-1024x768.png 1024w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-2-300x225.png 300w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-2-768x576.png 768w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-2.png 1080w\"/></figure>\n<p>Knitters call their “pile of shame” their “stash” and post memes like this:</p>\n<figure class=\"wp-block-image size-full\"><img alt=\"\" class=\"wp-image-4783\" decoding=\"async\" loading=\"lazy\" src=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-3.png\"/></figure>\n<figure class=\"wp-block-image size-full\"><img alt=\"\" class=\"wp-image-4784\" decoding=\"async\" loading=\"lazy\" sizes=\"auto, (max-width: 779px) 100vw, 779px\" src=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-4.png\" srcset=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-4.png 779w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-4-300x295.png 300w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-4-768x756.png 768w\"/></figure>\n<p>The Japanese even have the word “tsundoku” which means buying books and piling them up knowing that you won’t read them. <a href=\"https://www.openculture.com/2024/07/tsundoku-should-enter-the-english-language-now.html\">Image credit</a></p>\n<figure class=\"wp-block-image size-full\"><img alt=\"\" class=\"wp-image-4785\" decoding=\"async\" loading=\"lazy\" sizes=\"auto, (max-width: 800px) 100vw, 800px\" src=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-5.png\" srcset=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-5.png 800w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-5-300x200.png 300w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-5-768x511.png 768w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-5-700x465.png 700w\"/></figure>\n<h2 class=\"wp-block-heading\">The power of Steam as a platform is that it enables hoarding</h2>\n<p>A couple years ago Simon Carless wrote this <a href=\"https://newsletter.gamediscover.co/p/how-many-pc-games-get-bought-but\">really good article</a> that found that the median steam player has 51.5% of their collection unplayed. HALF!</p>\n<figure class=\"wp-block-image size-large\"><a href=\"https://newsletter.gamediscover.co/p/how-many-pc-games-get-bought-but\"><img alt=\"\" class=\"wp-image-4786\" decoding=\"async\" loading=\"lazy\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\" src=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-6-1024x576.png\" srcset=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-6-1024x576.png 1024w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-6-300x169.png 300w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-6-768x432.png 768w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-6.png 1456w\"/></a></figure>\n<p>You are not competing with sleep or Netflix</p>\n<p>Valve cracked the problem that Netflix was struggling with: how do you sell to people who have so much entertainment at their fingertips that they don’t have enough hours in the day to play and watch it all. Valve basically added infinite hours to a gamer’s day, it is a theoretical future day where gamers might someday spend hours playing your game (but let’s be honest, won’t).</p>\n<p>The reason game developers are willing to give Valve 30% of their revenue is because the Steam marketplace is packed with super gamers who throw money at games they have no intention of playing.</p>\n<p>When I ran a survey of games that participated in Steam Next Fest, I found that for the median game most people only wishlist a game without even playing the demo. THE DEMO IS FREE! If players are so interested in the game, why don’t they play it!</p>\n<figure class=\"wp-block-image size-full\"><img alt=\"\" class=\"wp-image-4788\" decoding=\"async\" loading=\"lazy\" sizes=\"auto, (max-width: 768px) 100vw, 768px\" src=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-8.png\" srcset=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-8.png 768w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-8-300x247.png 300w\"/></figure>\n<p>After I published this study data, many developers couldn’t believe this. They thought that this is proof that developers shouldn’t waste time making demos if the majority of shoppers aren’t even going to play them.</p>\n<p>You still need to make a demo! And yes most players won’t play it. But that isn’t bad. Steam players get satisfaction out of finding a hidden gem and adding it to their collection. This is how Steam and their player base functions! Regardless if it is a free demo, or a full game, hobbyists find satisfaction in collecting. Even if they know deep down that they will never actually play it.</p>\n<h2 class=\"wp-block-heading\">So what? How does this affect me?</h2>\n<p>So first, go in knowing that most people will probably buy your game and never play it. Don’t be discouraged by that! This is totally normal for Steam. It’s a good thing for developers. If Steam shoppers were rational and only bought games they were going to play, we would sell a lot fewer games. Half this industry would be gone. </p>\n<p>Knowing Steam players are hoarders explains why you give them that 30%: you get access to a bunch of drunken sailors who spend money irresponsibly. </p>\n<p>If you have released a game, you can look at the Steamworks Financial data to see Lifetime total units (which include sales from Steam, and key activations) and compare that to the lifetime unique users who actually launched the game.  </p>\n<figure class=\"wp-block-image size-full\"><img alt=\"\" class=\"wp-image-4789\" decoding=\"async\" loading=\"lazy\" sizes=\"auto, (max-width: 295px) 100vw, 295px\" src=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-9.png\" srcset=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-9.png 295w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-9-249x300.png 249w\"/></figure>\n<p>Most of this data is just “just so” information. You can’t really take advantage of it. I don’t think you stress and spend your days wondering how you can make more people who bought the game play the game. And don’t ask me to do a deep study asking everyone for their ratio. I don’t think that is an important thing to track or obsess about. I bet that the more popular a game is, the more people buy a game and not play it. Also if your game appeared in a Humble or Fanatical bundle, it is going to be much much higher.</p>\n<p>My guess (but I have no definite proof) is that when a game has buzz and everyone is talking about it, more and more steam shoppers buy it even though they don’t intend to play it right away. They probably say to themselves “I should check out this game, a lot of people are talking about it.”</p>\n<p>Also, having a good genre and hook might be why shoppers buy a game even if they don’t play it. The game has to intrigue people on sight. That doesn’t mean your game has to be click-bait or a lie. A good example of this is the game <a href=\"https://store.steampowered.com/app/1989270/Slay_the_Princess__The_Pristine_Cut/\">Slay the Princess</a>. The stakes, the hook, and action are all right there in the title and the thumbnail. Kill this princess! It is a good, complex, beloved game. Slay the Princess sold much better than Black Tabby Games’ other game <a href=\"https://store.steampowered.com/app/1609230/Scarlet_Hollow\">Scarlet Hollow</a> because, as the developer pointed out, it has a much subtle proposition that takes longer to explain. </p>\n<p>So, don’t be coy, don’t bury what makes your game interesting because you don’t want to “spoil” the story. Spoil it! Get people so interested they THINK they will one day play it. </p>\n<p>This might also explain my theory that games that have a very clear genre do better on Steam. If players can look at your game in a glance and figure out the genre, they are more likely to impulse buy because they say “Ah, I love open world survival crafting games! I know this! I am definitely going to play this once I am finished with the other 20 OWSC games in my collection.” If your genre is ambiguous, you won’t be picked up by hoarders.</p>\n<p>So, lean into genre tropes. Make sure your trailer, capsule, and UI at a glance look like the other games in your genre.</p>\n<p>Also this might explain why launching next to a big AAA launch doesn’t really affect us <a href=\"https://howtomarketagame.com/2023/10/23/the-other-game-that-succeeded-during-the-starfield-launch/\">(I explained this here</a>). If a player is collecting they will just buy the AAA game AND your game if it is interesting enough. </p>\n<p>Also this explains why bundling works (<a href=\"https://howtomarketagame.com/2022/12/14/bundling-is-giving/\">I explained bundling here</a>). About 10% of people buying a game will opt in to buy a secondary related game for a discount. They don’t even want to play that bundled game it is just a “why not?” impulse buy. They aren’t going to play it.</p>\n<p>Finally, you need to discount your game frequently. Discounting triggers the wishlists which triggers the email that says “this game you wishlisted is now on sale.” <a href=\"https://steamdb.info/sales/history/\">The steam summer sale starts this month</a>. The summer sale is the leading way that players fill up their library with games they will never play. Sales drive impulse buys. So always participate in them. Discount your game every chance you get. You are trying to get the impulse purchase. </p>\n<h2 class=\"wp-block-heading\">Full disclosure</h2>\n<p>I too participate in video game tsundoku. SteamDB has a tool that will show you how few games in your collection you have actually played. Here is mine. 2/3rds of my games were never played. </p>\n<figure class=\"wp-block-image size-full\"><img alt=\"\" class=\"wp-image-4790\" decoding=\"async\" loading=\"lazy\" sizes=\"auto, (max-width: 475px) 100vw, 475px\" src=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-10.png\" srcset=\"https://howtomarketagame.com/wp-content/uploads/2025/06/image-10.png 475w, https://howtomarketagame.com/wp-content/uploads/2025/06/image-10-300x51.png 300w\"/></figure>\n<p>To see your own stats go here:</p>\n<p>And enter your Steam user ID.</p>\n<h2 class=\"wp-block-heading\">Summary</h2>\n<p>So I think I just spent a bunch of words giving you something to worry about and then told you not to worry about it…. don’t worry about this. </p>\n<p>I think it’s just important for developers have a more realistic understanding of who their audience is.</p>\n<p>You should probably be more jaded. Not everyone who buys your game is a ravenous fan who will join your discord, do cosplay of your main character, and participate in art contests. Your game is just another brick in their tsundoku pile. </p>\n<p>Enjoy game development kids!</p>\n</div>\n</div></body></html>",
    "summary": "Most people who buy your game won’t play it"
  },
  "2025-07-13-2041-algorithmsformakinginterestingorganicsimulations": {
    "title": "Algorithms for making interesting organic simulations",
    "url": "https://bleuje.com/physarum-explanation/",
    "url_hash": "b47bd753",
    "date": "2025-07-13T20:41:32.152916",
    "authors": [],
    "content_html": "<html><body><div><main>\n<h2>Algorithms for making interesting organic simulations</h2>\n<p>The purpose of this article is to explain techiques that enabled me to make simulations like the one\n                below, along with a lot of other organic looking things. We will focus on algorithmic techniques for\n                artistic purpose\n                rather than scientific meaning.</p>\n<video controls=\"\" muted=\"\" playsinline=\"\" poster=\"https://bleuje.com/videos/physarum-no11small.jpg\" preload=\"none\">\n<source src=\"https://physarum-media.bleuje.com/physarum-no11small.mp4\" type=\"video/mp4\"/>\n</video>\n<hr class=\"subtle-hr\"/>\n<h2>1. Physarum algorithm from Jeff Jones (2010)</h2>\n<p>Jeff Jones presented a simulation algorithm that reproduces the behavior of organisms such\n                as <a href=\"https://en.wikipedia.org/wiki/Physarum_polycephalum\"><em>Physarum polycephalum</em></a>.\n                It is explained in <a href=\"https://uwe-repository.worktribe.com/output/980579/characteristics-of-pattern-formation-and-evolution-in-approximations-of-physarum-transport-networks\">this\n                    paper</a>.</p>\n<p>Results typically look like this: <span class=\"subtle\">(source: screenshots from implementation by Amanda\n                    Ghassaei)</span></p>\n<h3>General principle</h3>\n<p>The basic idea is that particles (also called agents) move around, leaving a trail behind them and trying\n                to follow the trails\n                they detect.</p>\n<p>Below is an interactive explanation of a single agent, <em>without representing the trail update</em>.\n                <span class=\"subtle\">Please don't mind the glitch after slider change :)</span>\n</p>\n<p class=\"sketch-holder-2\" id=\"sketch2\"></p>\n<p class=\"control-bar\" id=\"controls2\"></p>\n<h4>Detailed description of the algorithm</h4>\n<p>A large number of agents move in a 2D space.</p>\n<p>\n                At each iteration of the algorithm, agents deposit trail on an\n                image called a <strong>trail map</strong>, just by adding a value to a pixel of the image. In the above\n                illustration, each cell represents a pixel of the trail map image.</p>\n<p><u>Agent attributes:</u>\n</p><ul>\n<li>2D position <strong>(x,y)</strong></li>\n<li>orientation: an <strong>angle</strong> called <strong>heading</strong></li>\n</ul>\n<p>Here are the different steps for an iteration of the algorithm:</p>\n<u>1. Sensing:</u>\n<ul>\n<li>Each agent \"looks\" at three places: straight ahead, slightly right, and slightly\n                    left. <span class=\"subtle\">sometimes not so slightly</span>\n</li>\n<li>The distance from the agent to the 3 sensor places is defined by the parameter <strong>Sensor\n                        Distance</strong> <span class=\"blue\">(SD)</span>.</li>\n<li>The side angle is a parameter called <strong>Sensor Angle</strong> <span class=\"blue\">(SA)</span>.\n                </li>\n<li>The agent detects the trail intensity at those three positions/pixels.</li>\n</ul>\n<u>2. Rotation and movement:</u>\n<ul>\n<li>If the highest value is to the left or right, the agent turns in that direction.</li>\n<li>The turn angle is controlled by the parameter <strong>Rotation Angle</strong> <span class=\"red\">(RA)</span>.</li>\n<li>If the highest value is straight ahead, the agent doesn't rotate.</li>\n<li>Actually in the case where straight ahead is the lowest value, the agent makes a random choice\n                    between left and right.</li>\n<li>After potentially turning, the agent moves forward by a distance called <strong>Move Distance\n                    </strong> <span class=\"red\">(MD)</span>.</li>\n</ul>\n<p><u>3. Deposit:</u> the agents add a value to the trail map at their new position.</p>\n<p><u>4. Trail diffusion and decay:</u>\n                At each iteration, after deposit of all agents, the trail is slightly diffused (a sort of blur effect on\n                the image), and multiplied by a <strong>decay factor</strong> (for example <strong>0.75</strong>) to\n                keep things stable. A more precise\n                explanation will be given later. <span class=\"subtle\">Although the trail is a 2D\n                    image,\n                    artistically it's often better not to display it directly, and instead only show the\n                    particles.</span>\n</p>\n<p>By modifying the four main parameters (SD, SA, RA, MD), various simulated behaviors can be observed.\n\n                The algorithm from Jeff Jones can have more complex features than this but I'm giving a simple version\n                that's used for what is described next in this article.</p>\n<h3>Real interactive implementation with few agents.</h3>\n<p>The simulation below implements the algorithm, there are just too few particles and too few pixels for\n                cool\n                structures to appear!</p>\n<p class=\"sketch-holder\" id=\"sketch1\"></p>\n<p class=\"control-bar\" id=\"controls1\"></p>\n<p><span class=\"subtle\">You can check out <a href=\"https://apps.amandaghassaei.com/gpu-io/examples/physarum/#:~:text=This%20app%20simulates%20the%20network,Written%20by%20Amanda%20Ghassaei\">this\n                        very nice webpage</a> by Amanda Ghassaei, to see the simulation with a lot of particles and with\n                    controllable sliders.</span></p>\n<p>Another explanation/review of this algorithm from Jeff Jones can be found <a href=\"https://cargocollective.com/sagejenson/physarum\">here</a>. It has a pretty drawing to sum up\n                the algorithm.</p>\n<details class=\"image-toggle\">\n<summary>Show explanation image by Sage Jenson</summary>\n<img alt=\"Sage Jenson physarum explanation diagram\" src=\"https://payload.cargocollective.com/1/18/598881/13800048/diagram_670.jpg\"/>\n</details>\n<hr class=\"subtle-hr\"/>\n<h2>2. <em>36 Points</em> by Sage Jenson (2019-2022)</h2>\n<p>A more complex version of the previous algorithm can be found in the work <strong><a href=\"https://sagejenson.com/36points/\"><em>36 Points</em></a></strong> by Sage Jenson, which\n                displays amazing varied behaviours. Press letters or digits of your keyboard to\n                change the Point. <span class=\"subtle\"> 26 letters + 10 digits = 36</span>\n</p>\n<p>It uses a single algorithm and each Point represents different parameters, which result\n                in different behaviours.\n\n                A Point corresponds to a behaviour obtained with 20 parameters (so mathematically this project shows 36\n                points of ℝ²⁰).\n            </p>\n<p>The above images show 6 Points. <span class=\"subtle\"><a href=\"https://retrospective.feralfile.com/ff1/artists/sage-jenson-3kv\">(found there)</a></span>\n</p>\n<h3>Main idea</h3>\n<p>Looking at the code we can understand some clever ideas. The most important one is to make the parameters\n                of the classic algorithm different depending on the value <strong>\\( x \\)</strong> of the trail map at\n                the particle's position.</p>\n<p>The formulas below are used:</p>\n<p>\n                $$\n                \\begin{eqnarray}\n                \\text{sensor distance} &amp;=&amp; p_1 + p_2 \\cdot x^{p_3} \\nonumber \\\\\n                \\text{sensor angle} &amp;=&amp; p_4 + p_5 \\cdot x^{p_6} \\nonumber \\\\\n                \\text{rotation angle} &amp;=&amp; p_7 + p_8 \\cdot x^{p_9} \\nonumber \\\\\n                \\text{move distance} &amp;=&amp; p_{10} + p_{11} \\cdot x^{p_{12}}\n                \\end{eqnarray}\n                $$\n            </p>\n<p>For each iteration, we first get the value <strong>\\( x \\)</strong> of the trail map at the particle's\n                position,\n                and then with the previous formulas we just do the same as the previous classic algorithm. That gives us\n                12\n                parameters to play with instead of 4.</p>\n<p>Below is an update of the animated explanation with a single agent. This is using fixed parameters.</p>\n<p class=\"sketch-holder-2\" id=\"sketch3\"></p>\n<p class=\"control-bar-buttons\" id=\"controls3\"></p>\n<p>I think adding interactive sliders to control the 12 parameters wouldn't add much value for the\n                explanation.\n            </p>\n<h3>Other idea</h3>\n<p>There are 2 other parameters that are important to use: two offsets to rather get <strong>\\( x\n                    \\)</strong>\n                near the particle position.</p>\n<p>The first one is an absolute vertical offset <strong>\\( p_{13} \\)</strong> (\"absolute\" meaning the\n                heading of the particle\n                doesn't matter). The second one, <strong>\\( p_{14} \\)</strong>, is an offset relatively to the\n                particle's heading (getting \\( x \\) ahead of the particle),</p>\n<p>A piece of code for that part can look like this:</p>\n<h3>Respawn</h3>\n<p>Another thing in <em>36 Points</em> is that in addition to position and heading attributes, there is a\n                progress\n                attribute so that a particle periodically respawns at a random position.</p>\n<h3>Other comments</h3>\n<p>Simply by using variations of these 14 parameters, very different and interesting behaviours can be\n                obtained. At this point maybe we should not call the results \"physarum simulations\", but rather\n                \"speculative biology\" as Sage seems to state. </p>\n<p>I haven't used the 6 other parameters from <em>36 Points</em> which contains for a example different\n                decay factors. </p>\n<p>Sage's piece of code <span class=\"subtle\"><a href=\"https://gist.github.com/Bleuje/1e497df4505ca24c39ab3930a95700b3\">(link)</a></span> that\n                implements the particle update with these techniques\n                has the following <strong>license</strong>: <br/>\n                License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</p>\n<hr class=\"subtle-hr\"/>\n<h2>3. Bleuje implementation</h2>\n<p>You can find my implementation of the previous algorithm on github: <strong><a href=\"https://github.com/Bleuje/physarum-36p\">physarum-36p</a></strong></p>\n<p>Although I use the techniques described in the previous part that come from <em>36 Points</em>, my\n                implementation is different, and because of that I added a 15th parameter to make some points of <em>36\n                    Points</em> work. It's simply some rescaling factor for the sensed \\( x \\). A lot of points from\n                <em>36 Points</em> don't work at all with my implementation, and those that work mostly give different\n                behaviours. I also added new points.\n            </p>\n<p>Below is a video showing what this implementation produces for 22 different Points (each one having 15\n                parameters).</p>\n<video controls=\"\" muted=\"\" playsinline=\"\" poster=\"images/bleuje-22-points-screenshot.png\" preload=\"none\">\n<source src=\"https://physarum-media.bleuje.com/bleuje-22-points.mp4\" type=\"video/mp4\"/>\n</video>\n<p>Below is a description of what the code is doing.</p>\n<h3>Real-time setup</h3>\n<p>In order to have real-time fast computation, we can use shaders to compute the algorithm on the GPU. I'm\n                using compute shaders and openFrameworks to manage them and the interface. The particles updates are\n                done in parallel, same for the trail map updates in other shaders. It can run smoothly with millions of\n                particles.\n            </p>\n<p>There are 4 shaders:</p>\n<ul>\n<li>A shader that just resets counters to zero.</li>\n<li>Particle update/move, incrementing counter on new pixel postion.</li>\n<li>Trail deposit from counter, and pretty image production.</li>\n<li>Diffusion + decay on trail map.</li>\n</ul>\n<h3>Diffusion and decay algorithm</h3>\n<p>The diffusion is using a 3x3 cells kernel, as explained in the code below.</p>\n<details class=\"code-block\">\n<summary>Show code for diffusion and decay step</summary>\n<p class=\"code-content\">\n</p>\n</details>\n<p>The implementation is actually a bit different because we \"loop\" the image at the borders. <span class=\"subtle\"><a href=\"https://github.com/Bleuje/physarum-36p/blob/main/bin/data/shaders/computeshader_diffusion.glsl\">(link\n                        to actual code)</a></span> </p>\n<h3>Deposit on trail map</h3>\n<p>There is a counter of particles on each pixel of the trail map. The counters are set to 0 at the\n                beginning ot\n                each iteration of the algorithm. After they move, the particles increment the counter at their position,\n                which can be done in parallel thanks to the atomicAdd function in glsl.</p>\n<p>To update the trail map, we add \\( \\sqrt{k} \\times f \\) to the trail map image, where \\( k \\) is the\n                particles count at the pixel and \\( f \\) some deposit factor. This part is a personal idea, I find that\n                it works quite well. I also limit the count to a maximum value.</p>\n<p>Here is simplified code for that part. <span class=\"subtle\"><a href=\"https://github.com/Bleuje/physarum-36p/blob/main/bin/data/shaders/computeshader_deposit.glsl\">(link\n                        to actual code)</a></span></p>\n<details class=\"code-block\">\n<summary>Show GLSL code piece for particle deposit step</summary>\n<p class=\"code-content\">\n</p>\n</details>\n<h3>Difference compared to <em>36 Points</em></h3>\n<p>The trail map in <em>36 Points</em> works differently compared to what I described. If I understand\n                correctly, in <em>36 Points</em> particles are like transparent dots that are added on the trail map\n                image. It results that the\n                trail map doesn't have values larger than the opaque value 1.</p>\n<p>In my implementation there is no such limit on trail map values, so when getting the value \\( x \\) we\n                clamp\n                it to avoid a value larger than 1: \\( x = \\min(x,1) \\).</p>\n<h3>Move shader</h3>\n<p>With the previous explanations we can give simplified code for the particle move and update.</p>\n<details class=\"code-block\">\n<summary>Show GLSL code piece for particle update/move (the most important code)</summary>\n<p class=\"code-content\">\n</p>\n</details>\n<span class=\"subtle\"><a href=\"https://github.com/Bleuje/physarum-36p/blob/main/bin/data/shaders/computeshader_move.glsl\">(link\n                    to actual code)</a></span>\n<h3>Displayed image</h3>\n<p>To get the image to display, the particles count on a pixel can be mapped to brightness in [0,1], non\n                linearly. The deposit shader does it at the same time as doing the deposit on trail map.</p>\n<p>Some screenshots to end this section:</p>\n<hr class=\"subtle-hr\"/>\n<h2>4. Color experiments</h2>\n<p>A natural thing to do to obtain more colorful simulations is to map the counter of particles on a pixel\n                to a color gradient, typically from black to white with various colors in between.</p>\n<p>I experimented with something more complex. The trail map image has two channels: one is the classic\n                trail map, the other one is the trail map with a delay. When determining the color of a pixel, we check\n                for the difference between trail map and delayed trail map at this pixel. The absolute value of the\n                difference interpolates the previous color (with a gradient) towards white or another gradient. With\n                that technique, areas where there is more change can have different colors. The interpolation amount can\n                also be different with distance from the center.</p>\n<p><span class=\"subtle\"><a href=\"https://github.com/Bleuje/interactive-physarum/blob/main/bin/data/shaders/computeshader_deposit.glsl\">Link\n                        to an implementation</a></span></p>\n<hr class=\"subtle-hr\"/>\n<h2>5. Weird velocity effect experiment</h2>\n<p>At some point I wanted to experiment with adding velocity attributes to particles, so that they have some\n                kind of inertia.</p>\n<p>I don't remember how, but with my experiments I arrived at a technique that can produce smooth and\n                intricate results. It's described in the code below.</p>\n<details class=\"code-block\">\n<summary>Show GLSL code piece for weird effect</summary>\n<p class=\"code-content\">\n</p>\n</details>\n<p>In the videos below, after 3 seconds the effect is activated.</p>\n<video controls=\"\" muted=\"\" playsinline=\"\" poster=\"images/effect-g-small.jpg\" preload=\"none\">\n<source src=\"https://physarum-media.bleuje.com/effect-g-small.mp4\" type=\"video/mp4\"/>\n</video>\n<video controls=\"\" muted=\"\" playsinline=\"\" poster=\"images/effect-v-small.jpg\" preload=\"none\">\n<source src=\"https://physarum-media.bleuje.com/effect-v-small.mp4\" type=\"video/mp4\"/>\n</video>\n<video controls=\"\" muted=\"\" playsinline=\"\" poster=\"images/effect-m-small.jpg\" preload=\"none\">\n<source src=\"https://physarum-media.bleuje.com/effect-m-small.mp4\" type=\"video/mp4\"/>\n</video>\n<video controls=\"\" muted=\"\" playsinline=\"\" poster=\"images/effect-q-small.jpg\" preload=\"none\">\n<source src=\"https://physarum-media.bleuje.com/effect-q-small.mp4\" type=\"video/mp4\"/>\n</video>\n<hr class=\"subtle-hr\"/>\n<h2>6. Playful interaction ideas, points mixing</h2>\n<p>I've been making a playful version of these algorithms. The main idea is that there is a cursor that the\n                user controls, through mouse or joystick, and different Points are spatially mixed.</p>\n<p>At the\n                center of the cursor the simulation parameters use the first Point and far from cursor it's the second\n                one. In the area in between, interpolation is done to get parameters. The interpolation parameter is\n                defined with a gaussian function, and the size of the cursor is a standard deviation \\( \\sigma \\). Let's\n                call \\( \\mathbf{P} \\) the particle position, and \\( \\mathbf{C} \\) the cursor position. I also use the\n                word pen instead of\n                cursor.</p>\n<p>\n                $$t = \\exp\\left( -\\frac{\\|\\mathbf{P} - \\mathbf{C}\\|^2}{\\sigma^2} \\right)$$\n                $$\\text{param} = (1-t) \\times \\text{BackgroundPoint.param} + t \\times \\text{CursorPoint.param} $$\n            </p>\n<p>We do this for all Point parameters of the simulation.</p>\n<p>The user can control pen size and navigate through Point choices.</p>\n<h3>Spawning action</h3>\n<p>The user can spawn particles at some positions: the desired spawn position is given as uniform to the\n                move\n                shader, and each particle has a small probability of going to that location. So the spawning\n                doesn't actually add new particles.</p>\n<h3>My big interactive physarum project</h3>\n<p>I open sourced the project where all of this and more features are implemented, it can be used as\n                playful artistic installation with one or two players using gamepads. Link:</p>\n<p><a href=\"https://github.com/Bleuje/interactive-physarum\">Interactive physarum repository</a></p>\n<hr class=\"subtle-hr\"/>\n<h2>7. Other experiments</h2>\n<p>The algorithm has enough elements to allow for a lot of room for experimentation.</p>\n<h3>Example 1</h3>\n<p>Here is an example where the heading of the particle is used to interpolate parameters between two\n                Points.\n            </p>\n<p>\n                $$t = 0.5 + 0.5 \\times \\sin(\\text{heading} + f(x,y,\\text{time}))$$\n                $$\\text{param} = (1-t) \\times \\text{Point1.param} + t \\times \\text{Point2.param} $$\n            </p>\n<p>\\( f(x,y,\\text{time}) \\) is a scalar field to play with. Mostly with that technique the simulation below\n                with\n                obtained.</p>\n<video controls=\"\" muted=\"\" playsinline=\"\" poster=\"https://bleuje.com/videos/physarum-no14small.jpg\" preload=\"none\">\n<source src=\"https://physarum-media.bleuje.com/physarum-no14small.mp4\" type=\"video/mp4\"/>\n</video>\n<p>Another thing that was used is that particle random respawn has different probability depending on the\n                sensed value at particle position.</p>\n<h3>Example 2</h3>\n<p>For the simulations below, the main technique was using negative effect amount with the technique that\n                was described earlier in the\n                velocity effect section (see \"effectAmount\" variable):</p>\n<video controls=\"\" muted=\"\" playsinline=\"\" poster=\"https://bleuje.com/videos/physarum-no15small.jpg\" preload=\"none\">\n<source src=\"https://physarum-media.bleuje.com/physarum-no15small.mp4\" type=\"video/mp4\"/>\n</video>\n<video controls=\"\" muted=\"\" playsinline=\"\" poster=\"https://bleuje.com/videos/physarum-no16small.jpg\" preload=\"none\">\n<source src=\"https://physarum-media.bleuje.com/physarum-no16small.mp4\" type=\"video/mp4\"/>\n</video>\n<h3>Example 3</h3>\n<p>In the velocity effect code given earlier, we can force adding some velocity.</p>\n<p>With that technique and higher respawn probability when further from center, the simulation below was\n                obtained:</p>\n<video controls=\"\" muted=\"\" playsinline=\"\" poster=\"https://bleuje.com/videos/physarum-no13small.jpg\" preload=\"none\">\n<source src=\"https://physarum-media.bleuje.com/physarum-no13small.mp4\" type=\"video/mp4\"/>\n</video>\n<hr class=\"subtle-hr\"/>\n<h2>8. Additional resources</h2>\n<p>\n</p>\n<hr class=\"subtle-hr\"/>\n<h2>9. Last remarks</h2>\n<p>If you followed well this article you can understand that I would not have achieved these results without\n                borrowing ideas and parameters from <a href=\"https://sagejenson.com/36points/\"><em>36 Points</em></a>.\n                The content of this page uses the same license as its key piece of code\n                <span class=\"subtle\">(<strong>License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported\n                        License</strong>)</span>.\n            </p>\n<p>Some of my experiments seem to force the behaviour and structure, rather than letting them emerge\n                naturally from uniform rules. Sometimes I don't feel proud about that aspect! It loses the speculative\n                biology quality.</p>\n<p>I hope this article can inspire people to build their own experiments.</p>\n<p>Thanks for reading!</p>\n<p><span class=\"subtle-2\">Contact: etin.jacob (at) gmail.com</span></p>\n<hr class=\"subtle-hr\"/>\n<span class=\"subtle\">by Etienne Jacob, article under <a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode\">CC BY-NC-SA 3.0</a></span>\n</main>\n</div></body></html>",
    "summary": "Algorithms for making interesting organic simulations"
  },
  "2025-07-16-0943-tobeabetterprogrammerwritelittleproofsinyourhead": {
    "title": "To be a better programmer, write little proofs in your head",
    "url": "https://the-nerve-blog.ghost.io/to-be-a-better-programmer-write-little-proofs-in-your-head/",
    "url_hash": "f7116624",
    "date": "2025-07-16T09:43:04.278665",
    "authors": [],
    "content_html": "<html><body><div><section class=\"gh-content gh-canvas is-body\">\n<p>This is a brief write-up of a trick I learned that helps me write code faster and more accurately. I say \"trick\", but it's really something I started to do without noticing  as I moved further into my career. </p><p>When you're working on something difficult, sketch a proof in your head as you go that your code will actually do what you want it to do. A simple idea, but easier said than done: doing this \"online\" without interrupting your flow takes a lot of practice. But once you get really good at it, you'll find that a surprising amount of the time your code will work on the first or  second try. It feels a little magical.</p><p>There are lots of ways to pull this off, and I don't want to be too prescriptive. I'll just list a few examples of the kinds of things I find myself reasoning about on the fly, so you get the general idea.</p><h2 id=\"monotonicity\">Monotonicity</h2><p>Something to keep an eye out for when proving things to yourself about your code is which parts are <em>monotonic</em>. </p><p>You're probably familiar with monotonic functions from mathematics. Informally, they're functions that don't \"go backwards\" - i.e. an increasing monotonic function can only increase or stay the same, while a decreasing monotonic function can only decrease or stay the same (these are also known as <em>nondecreasing</em> and <em>nonincreasing</em> functions, respectively.)</p><p>The concept of monotonic <em>code</em> is a little more nebulous than the concept of a monotonic function, but it captures the same idea of a process that can only proceed in one direction. Check-pointing, for example, is a great example of monotonicity. If you have (say) a script that needs to perform multiple tasks in sequence, you can keep a bit of state around on disk that details how many tasks you have completed so far. If something goes wrong and your script crashes, it can check the on-disk state to figure out how far it got, then start again from the earliest state that hasn't been run yet.</p><p>Checkpointing means that the \"current step\" pointer in your script can only go forwards, since the script can't regress and re-run a step it's already done. In this sense the script progresses <em>monotonically</em>, and it's apparent that if the script ever completes successfully, it will have run every step exactly once.</p><blockquote>\n<p>Keeping this kind of activity log is a simple idea that often pops up in surprising places, such as journaling file systems and database write-ahead logs. Another, more involved database example is an LSM tree. LSM trees are used in some databases to store rows in-memory and on-disk, and most of the time they are purely additive. Put loosely - an LSM tree keeps a log of all inserts, deletes, and updates, and scans the log to reconstruct the appropriate value of the row when the row is read. Stale operations are periodically discarded to save space in a process called compaction. The space taken by an LSM tree <em>only</em> grows (except during compaction, when it <em>only</em> shrinks.)<br/><br/> You can compare this to a B-tree, which is a more traditional database structure that deletes and updates rows in place. B-trees generally have to do a lot more work to reclaim the freed space after a delete, restructure things so there's room if an update grows a row, make sure there's enough buffer, etc. If you want, read a little bit more about B-trees and LSM trees, and see which one feels more intuitive to reason about.</p>\n</blockquote>\n<p>It's worth keeping an eye out for monotonicity, because you can usually use it to rule out wide swaths of possible outcomes. Another variation on this theme is immutability (which in a lot of ways is monotonicity's cousin) - when you create an immutable object, that object cannot be modified. Values can be assigned to an immutable object exactly once, at the time of the object's construction; you can't \"back out\" or \"undo\" the assignments. This allows you to ignore, out of hand, all scenarios in which an object might change out from under your feet.</p><h2 id=\"preand-post-conditions\">Pre- and post-conditions</h2><p>Pre-conditions and post-conditions are ways to specify constraints on the behavior of a function. A function's <em>pre-conditions </em>are the things that are assumed to be true just before the function runs. These can be conditions on the function's input, or more general claims about the program's state or environment. A function's <em>post-conditions</em> are things that are assumed to be true just after the function returns. As with pre-conditions, these claims can involve just about anything. If the pre-conditions of a function are true before the function runs, and the post-conditions are <em>not</em> true after the function finishes, then the function is not implemented correctly, at least according to the specified constraints.</p><p>These are simple (even obvious) concepts and not really proof techniques in and of themselves, but simply keeping track of what they are in formal terms can aid your reasoning. </p><p>(Sometimes you may come to find that your function does not have well-defined pre- and post-conditions, which is also good to know!)</p><p>Pinning down your post-conditions, in particular, is a good way to generate ideas for unit tests. It can also help to defensively add assertions that your preconditions and postconditions are true, and crash otherwise. This can make it easier to reason about what your code will do in the event it <em>doesn't </em>crash - this may sound like, at best, a neutral trade-off, but it's usually safer for code to crash early than to behave in unpredictable ways.</p><h2 id=\"invariants\">Invariants</h2><p>The <em>invariants</em> of a piece of code are things that should always be true before, during, and after that code runs, no matter what. As with pre- and post-conditions,  an invariant can involve pretty much anything.</p><p> It can be handy to think about consistency in terms of an invariant - in these situations the invariant is \"this data structure is consistent/valid\", and you need to prove to yourself that the code preserves that invariant at every point, no matter what happens. An easy way to do this to divide up your code into atomic \"steps\", and to prove that each step preserves the invariant on its own. Then you can conclude that the invariant will hold no matter which steps run or the order that they run in. </p><p>One of the oldest and most famous examples of an invariant is the <a href=\"https://en.m.wikipedia.org/wiki/Accounting_equation?ref=the-nerve-blog.ghost.io\" rel=\"noreferrer\">accounting equation</a>, which is the foundation of double-entry accounting. The accounting equation says, loosely, that the total amount of debits on a company's ledger must equal the total amount of credits. It's easy to prove that double-entry accounting, when done correctly, preserves this invariant: for every transaction, all increases (or decreases) to credit accounts must be equal to all increases (or decreases) to debit accounts. It's easy to see that if debits and credits balance before a transaction, they balance after the transaction. Thus, the invariant is always preserved.</p><p>Another way to maintain certain kinds of invariants is to use a listener or lifecycle method to make sure that the invariant stays true at certain critical points. This technique is often used when multiple pieces of state need to be kept in sync - for example,   C++ uses <a href=\"https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization?ref=the-nerve-blog.ghost.io\" rel=\"noreferrer\">constructors and destructors</a> to ensure that any memory an object needs only remains allocated while the object actually exists. <a href=\"https://react.dev/learn/synchronizing-with-effects?ref=the-nerve-blog.ghost.io\" rel=\"noreferrer\">useEffect</a> does something similar for React components.</p><p>(Since invariants have to hold for every possible scenario, they're usually easier to reason about when making changes that introduce relatively few new execution paths.)</p><h2 id=\"isolation\">Isolation</h2><p>I have a long-held conviction that a <em>lot</em> of the \"craft\" of software is (or ought to be) centered around modifying or augmenting an existing system without destabilizing anything. When making modifications to a codebase, it can be exceptionally useful to know how to prove that behaviors you <em>didn't</em> intend to change were, in fact, left unchanged.</p><p>There's a technique I rely on a lot to prove this to myself; I'm not sure if there's a name for this, and I perhaps wouldn't even call it a technique as much as a pattern of thought. The best way I can describe it is this: every change has a \"blast radius\" - a change to one part of the code may necessitate a change to another part to ensure the consistency/correctness of the whole system. This second change might require a change to a third part, and so on. Nailing down what behaviors a change does/doesn't affect involves identifying structural \"firewalls\" that can prevent a change from propagating past a certain point. It's kind of like the conceptual cousin of encapsulation.</p><p>This idea is pretty abstract, so here's an example from Nerve:</p><hr/><p>Nerve is a query engine that lets users query many data sources as if they were a single huge API. The Nerve query pipeline consists of a <em>query planner</em>, which computes a specific step-by-step plan for running a query, and a <em>query executor</em>, which carries the plan out. A query in Nerve can contain both <em>material</em> fields and <em>virtual</em> fields. Virtual fields are basically derived fields - in other words, a material field is pulled directly from a source API, while a virtual field is computed at runtime from other virtual or material fields. </p><p>Material fields are pretty easy to handle - you just make the appropriate requests and pull data from the responses as needed. Virtual fields are a little trickier, because sometimes virtual fields <em>depend</em> on other fields. We need to ensure that we have all of the virtual field's prerequisites before we can calculate a virtual field. It's unnecessarily onerous to require the user to add these prerequisites to the query themselves. Instead, we should have some machinery that pulls a virtual field's dependencies before calculating it. But where should this machinery go?</p><p>One straightforward option is to modify both the query planner and the query executor to give them a concept of a material field that's pulled as a dependency instead of as something specified in the query. These \"dependency fields\" should be kept around so we can use them to calculate virtual fields, but they shouldn't be included in the final query results. There are other design considerations we need to keep in mind - for example, we probably want to find ways to pull these dependency fields in the same requests that we make when pulling \"normal\" material fields, etc. etc. </p><p>This is basically an expansion of the query pipeline: maybe a little involved, but certainly doable. There's a trick we can pull here though, which is to dodge the problem by <em>over</em>-<em>pulling</em> and cleaning up after the fact.</p><p>In this second approach we don't introduce any new concepts at all. Instead, during query planning, we calculate the dependencies of each virtual field and simply add them to the query, then hand them off the query executor. The query executor has no idea that the query it's getting is not the query the user wrote; it just runs the query as usual, first pulling all material fields, and then calculating any relevant virtual fields (and it never has to pull a virtual field's dependencies because somehow they're always magically there!)</p><p>After query execution is complete, we'll end up with query results that contain strictly more fields than the user asked for. So at the end, we add a <em>pruning </em>step that removes any fields that weren't in the user's query.</p><p>The main advantage of this solution is that the change is <em>completely</em> confined to two small layers and the beginning and end of the query pipeline - the stuff in the middle (the \"meat\" of the query engine) doesn't need to change at all. In particular, the boundary between the query planner and the query executor acts as a \"firewall\" that stops the change from propagating. This makes it trivially easy to prove that our changes won't cause regressions when we execute queries that don't need to pull any dependencies (since in that case we only run code that hasn't been touched!)</p><p>Sometimes this kind of approach is appropriate, and sometimes it isn't, but all else being equal it simply produces less cognitive load when you leave as much code untouched as you can. </p><p>(You may have heard this idea talked about in the context of the <a href=\"https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle?ref=the-nerve-blog.ghost.io\" rel=\"noreferrer\">Open-Closed Principle</a>. This principle encompasses a bunch of OOP particulars that aren't relevant here; what is relevant is the <a href=\"https://drive.google.com/file/d/0BwhCYaYDn8EgN2M5MTkwM2EtNWFkZC00ZTI3LWFjZTUtNTFhZGZiYmUzODc1/view?resourcekey=0-FsS837CGML599A_o5D-nAw&amp;ref=the-nerve-blog.ghost.io\" rel=\"noreferrer\">philosophy</a> behind it, namely: \"When requirements change, you extend the behavior of [your program] by adding new code, not by changing old code that already works.\")</p><h2 id=\"induction\">Induction</h2><p>Lots of interesting programs involve recursive functions or recursive data structures (and in a certain theoretical sense recursion is central to the act of computation itself.) Depending on the area you're working in, you may come across recursion constantly or only occasionally, but in either case knowing how to reason about it can make your life a lot easier.</p><p>A recursive data structure is a structure that contains a copy of itself (not necessarily an exact copy, but an instance of the same \"type\" of structure.) This copy can contain a copy, and so on; the process either goes on forever or terminates at a \"base case.\" A fractal, for instance, is recursive.</p><p>In computer science, the classic example of a recursive data structures is a tree. A tree is a node with a certain number of children; each child is itself a tree. A tree with <em>no</em> children is called a leaf, which is the base case.</p><p>Lists can also be formulated recursively, although you may not usually think of them that way. Every recursive list consists of a <em>head</em>, which is the \"first\" or leftmost element of the list, along with a <em>tail</em>, which contains the remaining elements of the list. The tail is itself a  list, and the base case list is the empty list. (In a similar vein, you can think of the natural numbers as recursive - every natural number is 1 plus another, smaller, natural number, except for 0, which is the base case.)</p><p>A recursive <em>function</em> is a function that calls itself. Recursive functions are usually used to process recursive data structures, since they can call themselves on the recursive copies (for example, a function to process a tree can call itself on all of the child trees.)</p><p>There's also a proof technique that's tailor-made for handling recursive structures, which is called <em>induction</em>. The \"classical\" version of induction is used to prove that some proposition \\(P(n)\\) holds true for any natural number \\(n\\). There are two steps to proving this:</p><ul><li>Prove \\(P(0)\\) is true.</li><li>Prove that \\(P(n)\\) implies \\(P(n+1)\\).</li></ul><p>This second step is called the <em>inductive step</em>, and the assumption that \\(P(n)\\) holds is called the <em>inductive hypothesis</em>. The inductive step is where the real power of induction lies - \\(P\\) is often much easier to prove once you have the inductive hypothesis at your disposal. The point of induction is to write a \"incremental\" version of the proof instead of trying to simultaneously prove it for every number at once.</p><p>When you're writing a recursive function, try to prove its correctness to yourself using induction. Here's a simple example, loosely adapted from the Nerve codebase:</p><hr/><p>Without getting too deep in the weeds - there's a particular case in Nerve where we need to visualize an AST for the user. The full AST is pretty complex, so before displaying it we need to remove nodes that the user probably doesn't care about. When we remove a node, that node's parent should \"inherit all of its children\" (in technical terms, we need to <a href=\"https://en.wikipedia.org/wiki/Edge_contraction?ref=the-nerve-blog.ghost.io\" rel=\"noreferrer\">contract the edge</a> between the removed node and its parent.) </p><blockquote>A quick note on terminology: technically, contraction is a term that only applies to edges, but I'm going to fudge things a little and talk about contracting nodes and trees as well. When I say \"contract a node\", I mean \"contract the edge between the node and its parent\". When I say \"contract a tree\", I mean \"contract some edge in the tree.\"</blockquote><p>Here's the function we use in Nerve (not the exact function, but this gives you the idea):</p><pre><code class=\"language-typescript\">function simplifyTree(root: Node): Node {\n  let newChildren = [] as Array&lt;Node&gt;;\n  \n  for (const child of root.children) {\n    const simplifiedChild = simplifyGraph(child);\n  \n    if (shouldContract(simplifiedChild)) {\n      for (const grandChild of simplifiedChild.children) {\n        newChildren.push(grandChild);    \n      }\n    } else {\n      newChildren.push(simplifiedChild);\n    }\n  }\n\n  root.children = newChildren;\n\n  return root;\n}</code></pre><p>We want our function to simplify the provided AST as much as possible. In other words, the post-condition is this: the graph returned by <code>simplifyGraph</code> should be \"fully contracted\" - i.e. it should not be possible to contract any more edges. </p><p>Here's an inductive proof that this condition does, in fact hold:</p><ul>\n<li>\n<p>Let's start with the base case. By definition, a root node can't be contracted, because there's no parent to roll it up into. So the base case - a single leaf node - already satisfies the post-condition. If we pass <code>simplifyGraph</code> a leaf node, it just returns it as-is, so we can conclude it works correctly on the base case.</p>\n</li>\n<li>\n<p>It's time for the magic: the inductive step. We need to prove that if <code>simplifyGraph</code> is correct for every subtree of a tree \\(T\\), it's correct for \\(T\\) as well. Crucially, we now have access to the inductive hypothesis, which means that we can assume each subtree (i.e. each tree rooted at a <code>simplifiedChild</code>) can't be contracted any further. <br/><br/> The only new potential contraction we have to consider is between <code>simplifiedChild</code> and <code>root</code>. If we determine <code>simplifiedChild</code> needs to be contracted, we remove it and graft all of its children onto <code>root</code>. After doing this for each <code>simplifiedChild</code>, we know <em>for sure</em> that the tree rooted at <code>root</code> can't be contracted any further, since if it could, that means at least one subtree could be contracted, which contradicts the inductive hypothesis. QED!</p>\n</li>\n</ul>\n<hr/><p>If you can start to do this kind of inductive reasoning on instinct, you may find it easier to deal with recursive functions. </p><p>(If you want, try to convince yourself that <code>simplifyGraph</code> works correctly on every possible input by reasoning holistically, without using induction. Which approach feels more natural to you?)</p><h2 id=\"proof-affinity-as-a-quality-metric\">Proof-affinity as a quality metric</h2><p>My thesis so far is something like \"you should try to write little proofs in your head about your code.\" But there's actually a secret dual version of this post, which says \"you should try to write your code in a form that's easy to write little proofs about.\" </p><p>Similarly, each section of this post has its own dual form:</p><ul>\n<li>Look for monotonicity and immutability. → Write code that is monotonic and uses immutable data structures.</li>\n<li>Keep track of your pre- and post-conditions. → <em>Start</em> with pre- and post-conditions and write your code around those. Structure your code so that the pre- and post-conditions are easy to conceptualize and verify.</li>\n<li>You can prove a function maintains an invariant by proving each unit of work does. → You should subdivide your code into the smallest possible units that can maintain the invariant.</li>\n<li>Pay attention to where component boundaries act as \"firewalls\" that prevent change propagation. → Do your best to build as many of these \"firewalls\" as possible, and take advantage of them when writing new features.</li>\n<li>Use induction to prove things about recursive functions incrementally instead of all at once. Assume the inductive hypothesis is already proved, and use that to your advantage. → Write your recursive functions incrementally. Assume the recursive call is already implemented and write the part of the function that builds the \\(n+1\\) case from the \\(n\\) case. Then, separately, implement the base case.</li>\n</ul>\n<p>The idea is that you can judge the quality of your code by the ease with which you can reason about it. If it's easy for you to prove to yourself that your code is correct, it's probably pretty well-designed. On the other hand, if it's consistently frustrating or difficult, you should consider cleaning up or restructuring your code to make it more straightforward. </p><blockquote>I was tempted to call this quality \"provability\", but that term exists and has a different meaning, so instead I'll call it \"proof-affinity.\"</blockquote><p>As the suggestions above show, it's possible to (at least subjectively) design  for maximum proof-affinity.</p><p>Proof-affinity is, of course, not the only dimension of software quality that matters (you also want your code to be correct, and fast, and as easy as possible to use), but I think it's a very important one; after all, in order to build, augment, improve, or test your code, you have to understand what it does, what it doesn't do, and what it <em>could</em> do. This may sound grandiose, but I think that in an important sense, proof-affinity is a catalyst for good programming!</p><h2 id=\"how-to-get-better-at-this\">How to get better at this</h2><p>As I mentioned at the start, the type of micro-reasoning I've talked out here only starts to pay off once you can do it without really thinking. It's a little like typing that way; knowing how to touch-type only saves you time over hunting and pecking when it's basically instinctual. In both cases, developing your intuition requires...practice! I don't think there are any shortcuts; you've just gotta put in the hours. </p><p>I think the best way to do this is to write more (mathematical) proofs. Writing proofs about programs will definitely help, but I think the simple act of constructing proofs - on any topic - is a great way to hone the kind of logical thinking that will serve you well when working with complex systems (but you have to <em>write</em> them, and not just read them. Do the exercises!) For my own part, I started doing mathematics for fun a while ago, and I've noticed that writing proofs has helped improve my clarity of thought in a broad array of settings.</p><p>If you don't know where to start, I've been going through Stanford's <a href=\"https://www.edx.org/learn/algorithms/stanford-university-algorithms-design-and-analysis-part-1?ref=the-nerve-blog.ghost.io\" rel=\"noreferrer\">undergrad algorithms class</a> on EdX, which is a fun, proof-focused treatment with (imo) a great professor!</p><p>Another good place to train is - though it pains me to say it - Leetcode. Like many others, I think there are serious drawbacks to Leetcode <em>interviews</em>, but it can be useful for practicing on your own, since a lot of the problems are just difficult enough to exercise your proof-writing muscles. You don't have to time yourself (I usually don't.) Also, try to avoid <a href=\"https://leetcode.com/problems/single-number/description/?ref=the-nerve-blog.ghost.io\" rel=\"noreferrer\">problems</a> that have a \"trick\" to solving them;  instead, find <a href=\"https://leetcode.com/problems/lexicographical-numbers/description/?ref=the-nerve-blog.ghost.io\" rel=\"noreferrer\">problems</a> where at least some of the challenge is in formulating and implementing everything correctly. Focus on getting to a successful submission in as few tries as possible (if you run into little things like syntax errors that's ok.)</p><p>Happy coding/proving!</p><p></p>\n</section>\n</div></body></html>",
    "summary": "To be a better programmer, write little proofs in your head"
  },
  "2025-07-16-1130-introductiontotheworldoffractals": {
    "title": "Introduction to the world of fractals",
    "url": "https://beltoforion.de/en/recreational_mathematics/chaos_game.php",
    "url_hash": "36386140",
    "date": "2025-07-16T11:30:23.196005",
    "authors": [],
    "content_html": "<html><body><div><section>\n<span class=\"image main\">\n<img alt=\"\" src=\"https://beltoforion.de/en/recreational_mathematics/images/chaosspiel.webp\"/>\n<span class=\"annotation\">Various fractal patterns created by the Chaos Game</span>\n</span>\n<span class=\"image right\">\n<img alt=\"\" src=\"https://beltoforion.de/en/recreational_mathematics/images/chaosspiel.svg\"/>\n<span class=\"annotation\">The first 7 steps of the chaos game for the corner points ACABBCB.</span>\n<br/><br/>\n<img alt=\"\" src=\"https://beltoforion.de/en/recreational_mathematics/images/sierpinski.webp\"/>\n<span class=\"annotation\">The complete Sierpinski Triangle</span>\n</span>\n<h2>What is the Chaos Game?</h2>\n<p>\n\t\tFractals are self-similar patterns. The so-called chaos game (also called a random iteration algorithm) is a method to generate iterative fractals with the help of polygons.\n\t\t</p>\n<p>\n\t\tThe rules are simple and will be explained using the example of a triangle. It has the corner points A, B and C. You start the chaos game at a random point P1 within the triangle. \n\t\tTo calculate the next position P2, you choose one of the three corner points of the triangle at random and place P2 in the middle of the route between point P1 and the randomly selected \n\t\tcorner point. You repeat this process as often as you like and draw every point you obtain on to the screen.\n\t\t</p>\n<p>\n\t\tIt is striking that some areas of the triangle cannot be reached in later steps. \n\t\tThese areas form a fractal pattern. Only the first steps (orange in the picture) can land in these areas, all other points (green in the picture) land in between.\n\t\t</p>\n<p>\n\t\tThe result is a fractal, the so-called Sierpinski triangle. It was first described by the Polish mathematician Wacław Sierpiński in 1915. But it already \n\t\tappears in floor patterns in medieval Rome. <a href=\"#idRef2\">[2]</a>.\n\t\t</p>\n<h2>Generalization to arbitrary polygons</h2>\n<p>\n\t\tThis construction mechanism for fractals can be applied to any polygon. However, if you increase the number of corners, you should no longer halve the distance, but adjust the factor slightly, \n\t\totherwise the algorithm will not always create a fractal. For example: If you halve the distance between the current position and the randomly selected corner of a square you get an evenly \n\t\tfilled area and not a fractal.\n\t\t</p>\n<p>\n\t\tHalving the distance in a triangle corresponds to multiplying its length by a factor of 0.5. If this is generalized to polygons with n-vertices, then a favorable factor for any polygons with n-corner points \n\t\tcan be computed with this equation <a href=\"#idRef1\">[1]</a>:\n\t\t</p>\n<p class=\"article_eqn\">\n\t\t\\begin{equation}\n\t\tr = \\frac{n}{n+3}\n\t\t\\end{equation}\n\t\t</p>\n<p>\n\t\tThe results of runs of the chaos game for polygons with 3, 4 and 5 corners are shown in the following images. In addition a different color was assigned to each corner point of the polygon. \n\t\tThe color is assigned based on the the position of a corner point in the color wheel. During the calculation, each new point is colored with the color of the corner point in the direction \n\t\tin which it last jumped.\n\t\t</p>\n<h2>Constraining the random selection of corner points</h2>\n<p>\n\t\tSo far, the fractals look kind of regular. To change that, another modification is introduced. The corner points are still randomly selected, but \n\t\tconstraints on the selection are introduced. Such constraints can include:\n\t\t</p>\n<ul>\n<li>A corner point must not be selected twice in succession</li>\n<li>If a corner point has been selected, none of its neighbors may be selected in the next step.</li>\n<li>If the same corner point was selected twice in succession, the corner point selected in the next step must at least be 2 corners away.</li>\n</ul>\n<p>\n\t\tImagination knows no bounds. The following things can now be changed in our version of the random iteration algorithm:\n\t\t</p>\n<ul>\n<li>The number of corner points of the base polygon</li>\n<li>The factor r, which determines how far a point jumps in an iteration step in the direction of the randomly selected corner point</li>\n<li>Additional rules that slightly limit the \"randomness\" of the corner selection</li>\n</ul>\n<div class=\"box alt\">\n<div class=\"row gtr-50 gtr-uniform\">\n<div class=\"col-4\"><span class=\"image fit\"><img alt=\"\" loading=\"lazy\" src=\"https://beltoforion.de/en/recreational_mathematics/images/chaosspiel_n5_r05_unrestricted.webp\"/><span class=\"annotation\">n=5, r=0.5; Random corner point selection</span></span></div>\n<div class=\"col-4\"><span class=\"image fit\"><img alt=\"\" loading=\"lazy\" src=\"https://beltoforion.de/en/recreational_mathematics/images/chaosspiel_n5_r05_no_point_twice.webp\"/><span class=\"annotation\">n=5, r=0.5; Cornerpoints cannot be choosen twice in a row</span></span></div>\n<div class=\"col-4\"><span class=\"image fit\"><img alt=\"\" loading=\"lazy\" src=\"https://beltoforion.de/en/recreational_mathematics/images/chaosspiel_n5_r05_if_point_twice_next_point_min_dist_1.webp\"/><span class=\"annotation\">n=5, r=0.5; If a cornerpoint is chosen twice, the next selected point must not be a direct neighbor.</span></span></div>\n</div>\n</div>\n<h2>An alternate method of coloring</h2>\n<p>\n\t\tAn alternative method of coloring is to run the chaos game with slightly changed parameters for each color channel (red, green and blue) separately. With this approach, no color is \n\t\tassigned to the corner points of the polygon. Pixels on the screen are increased in brightness when the \n\t\tchaos game lands on a pixel. Only the brightness of the color channel assigned to the respective chaos game is increased.\n\t\t</p>\n<p>\nThat alone would not be enough, because three identical chaos games on three color channels would only produce a grayscale image. In order to bring more color into the simulation, the parameters of the three chaos games have to differ slightly. This can be achieved by modifying the parameter r for each of the chaos games minimally and randomly. The following three pictures show the result of such a modification.\n\t\t</p>\n<div class=\"box alt\">\n<div class=\"row gtr-50 gtr-uniform\">\n<div class=\"col-4\"><span class=\"image fit\"><img alt=\"\" loading=\"lazy\" src=\"https://beltoforion.de/en/recreational_mathematics/images/chaosspiel_rgb_2.webp\"/><span class=\"annotation\">n=5, r=0.5; Random corner point selection</span></span></div>\n<div class=\"col-4\"><span class=\"image fit\"><img alt=\"\" loading=\"lazy\" src=\"https://beltoforion.de/en/recreational_mathematics/images/chaosspiel_rgb_3.webp\"/><span class=\"annotation\">n=5, r=0.5; Cornerpoints cannot be choosen twice in a row</span></span></div>\n<div class=\"col-4\"><span class=\"image fit\"><img alt=\"\" loading=\"lazy\" src=\"https://beltoforion.de/en/recreational_mathematics/images/chaosspiel_rgb_1.webp\"/><span class=\"annotation\">n=5, r=0.5; If a cornerpoint is chosen twice, the next selected point must not be a direct neighbor.</span></span></div>\n</div>\n</div>\n<h2>Explaining the source code</h2>\n<p>\n\t\tThe implementation of the random iteration algorithm described here can be implemented in less than 80 lines of Python source code.\n\t\t</p>\n<pre><code class=\"python hljs\">import pygame\nimport random\nimport math\nimport colorsys\nfrom pygame.locals import *\n\nidx = [0, 0, 0]\n\ndef mark_pixel(surface, pos, pcol):\n    col = surface.get_at(pos)\n    surface.set_at(pos, (min(col[0] + pcol[0]/10, 255),\n                         min(col[1] + pcol[1]/10, 255),\n                         min(col[2] + pcol[2]/10, 255)))\n\ndef random_point_index(p):\n    if len(p) &lt;= 3:\n        return random.randint(0, len(p) - 1)\n\n    global idx\n    idx[2] = idx[1]\n    idx[1] = idx[0]\n    dst1 = abs(idx[1] - idx[2])\n\n    while True:\n        idx[0] = random.randint(0, len(p) - 1)\n        dst = abs(idx[0] - idx[1])\n        if dst1 == 0 and (dst == 1 or dst == len(p) - 1):\n            continue\n        else:\n            break\n\n    return idx[0]\n\ndef init_polygon(width, height, n):\n    delta_angle = 360/n\n    r = width/2 - 10\n    p = []\n\n    for i in range(0, n):\n        angle = (180 + i*delta_angle) * math.pi / 180\n        color = colorsys.hsv_to_rgb((i*delta_angle)/360, 0.8, 1)\n        p.append(((width/2 + r*math.sin(angle),\n                   height/2 + r*math.cos(angle)),\n                  (int(color[0]*255), int(color[1]*255), int(color[2]*255))))\n\n    return p\n\ndef main(width, height, n, r):\n    pygame.init()\n    surface = pygame.display.set_mode((width, height))\n    pygame.display.set_caption('Das Chaos Spiel')\n\n    p = init_polygon(width, height, n)\n\n    x, y = (400, 300)\n    step = 0\n    while True:\n        step = step + 1\n        point_idx = random_point_index(p)\n\n        pos = p[point_idx][0]\n        color = p[point_idx][1]\n        x += (pos[0] - x) * r\n        y += (pos[1] - y) * r\n\n        mark_pixel(surface, (int(x), int(y)), color)\n\n        if step % 1000 == 0:\n            pygame.display.update()\n\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.image.save(surface, 'chaosspiel.jpg')\n                pygame.quit()\n                return\n\nif __name__ == \"__main__\":\n    n=5; main(800, 800, n,  0.45)</code></pre>\n<p>\nThis Python script uses the libraries <i>random, math, colorsys</i> and <i>pygame</i> . The <i>pygame</i> library must be installed via Python's package manager PIP before the program can be run. \nAfter the <i>import</i> instructions, the global variable <i>idx</i> is declared. This is a field in which the index of the last two selected polygon corner points are saved. This information is \nnecessary to limit the random selection of corner points.\n\t\t</p>\n<pre><code class=\"python hljs\">import pygame\nimport random\nimport math\nimport colorsys\nfrom pygame.locals import *\n\nidx = [0, 0, 0]</code></pre>\n<p>\nThe function <i>mark_pixel</i> determines the color of the current pixel in the chaos game. The color is not set statically. If the position in the chaos game falls on a pixel, it is made a \nlittle lighter each time and colored in the color of the corner point that was chosen to get to this position. This results in beautiful color transitions in the fractal. Pixels that are not \noften visited are displayed darker.\n\t</p>\n<pre><code class=\"python hljs\">def mark_pixel(surface, pos, pcol):\n    col = surface.get_at(pos)\n    surface.set_at(pos, (min(col[0] + pcol[0]/10, 255),\n                         min(col[1] + pcol[1]/10, 255),\n                         min(col[2] + pcol[2]/10, 255)))</code></pre>\n<p>\nThe function <i>random_point_index</i> selects a random corner point of the polygon and returns its index. For this purpose, it receives an array of polygon corner points as its input parameter. \nFor a purely random selection of points, it would be sufficient to use the bold line. The variant shown here contains the contraint that if the same corner point was selected twice, the next \ncorner point must not be a direct neighbor.\n\t</p>\n<pre><code class=\"python hljs\">def random_point_index(p):\n    if len(p) &lt;= 3:\n        return random.randint(0, len(p) - 1)\n\n    global idx\n    idx[2] = idx[1]\n    idx[1] = idx[0]\n    dst1 = abs(idx[1] - idx[2])\n\n    while True:\n        idx[0] = random.randint(0, len(p) - 1)\n        dst = abs(idx[0] - idx[1])\n        if dst1 == 0 and (dst == 1 or dst == len(p) - 1):\n            continue\n        else:\n            break\n\n    return idx[0]</code></pre>\n<p>\nThe <i>init_polygon</i> function initializes the corner points of the polygon. The input parameters include the size of the playing field and the number of polygon corner points. At the same time, a color is assigned to each of the corner points of the polygon. This color corresponds to the position of the point in the color wheel.\n\t</p>\n<pre><code class=\"python hljs\">def init_polygon(width, height, n):\n    delta_angle = 360/n\n    r = width/2 - 10\n    p = []\n\n    for i in range(0, n):\n        angle = (180 + i*delta_angle) * math.pi / 180\n        color = colorsys.hsv_to_rgb((i*delta_angle)/360, 0.8, 1)\n        p.append(((width/2 + r*math.sin(angle),\n                   height/2 + r*math.cos(angle)),\n                  (int(color[0]*255), int(color[1]*255), int(color[2]*255))))\n\n    return p</code></pre>\n<p>\nThe <i>main</i> function is the main loop of the program. The function receives the size of the playing field, the number of polygon corner points and a factor r that controls the jump length as its parameters. \nThen the graphic subsystem is initialized and the iterations are carried out. During the iterations the current position is saved in the variables <i>x</i> and <i>y</i>. Finally the image is saved after a certain \nnumber of iterations.\n\t</p>\n<pre><code class=\"python hljs\">def main(width, height, n, r):\n    pygame.init()\n    surface = pygame.display.set_mode((width, height))\n    pygame.display.set_caption('Das Chaos Spiel')\n\n    p = init_polygon(width, height, n)\n\n    x, y = (400, 300)\n    step = 0\n    while True:\n        step = step + 1\n        point_idx = random_point_index(p)\n\n        pos = p[point_idx][0]\n        color = p[point_idx][1]\n        x += (pos[0] - x) * r\n        y += (pos[1] - y) * r\n\n        mark_pixel(surface, (int(x), int(y)), color)\n\n        if step % 1000 == 0:\n            pygame.display.update()\n\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.image.save(surface, 'chaosspiel.jpg')\n                pygame.quit()\n                return\n\nif __name__ == \"__main__\":\n    n=5; main(800, 800, n,  0.45)</code></pre>\n</section>\n</div></body></html>",
    "summary": "Introduction to the world of fractals"
  },
  "2025-07-16-1153-fractalmathematicsnatureartbritannica": {
    "title": "Fractal | Mathematics, Nature & Art | Britannica",
    "url": "https://www.britannica.com/science/fractal",
    "url_hash": "475902c4",
    "date": "2025-07-16T11:53:04.787352",
    "authors": [],
    "content_html": "<html><body><div><section data-level=\"1\" id=\"ref1\"><span class=\"marker PREMOD1 mod-inline\"></span><p class=\"topic-paragraph\"><strong><span id=\"ref173796\"></span>fractal</strong>,  in <a class=\"md-crosslink autoxref\" data-show-preview=\"true\" href=\"https://www.britannica.com/science/mathematics\">mathematics</a>, any of a class of complex geometric shapes that commonly have “fractional dimension,” a <a class=\"md-dictionary-link md-dictionary-tt-off eb\" data-term=\"concept\" data-type=\"EB\" href=\"https://www.britannica.com/dictionary/concept\">concept</a> first introduced by the mathematician Felix Hausdorff in 1918. Fractals are distinct from the simple figures of classical, or Euclidean, geometry—the square, the circle, the sphere, and so forth. They are capable of describing many irregularly shaped objects or spatially nonuniform phenomena in nature such as coastlines and <a class=\"md-crosslink autoxref\" data-show-preview=\"true\" href=\"https://www.britannica.com/science/mountain-landform\">mountain</a> ranges. The term <em>fractal</em>, derived from the Latin word <em>fractus</em> (“fragmented,” or “broken”), was coined by the Polish-born mathematician Benoit B. Mandelbrot. See the animation of the Mandelbrot fractal <a class=\"md-crosslink autoxref\" data-show-preview=\"true\" href=\"https://www.britannica.com/topic/set-mathematics-and-logic\">set</a>.</p><span class=\"marker MOD1 mod-inline\"></span><span class=\"marker PREMOD2 mod-inline\"></span><p class=\"topic-paragraph\">Although the key concepts associated with fractals had been studied for years by mathematicians, and many examples, such as the Koch or “snowflake” curve were long known, Mandelbrot was the first to point out that fractals could be an ideal tool in applied mathematics for modeling a variety of phenomena from physical objects to the behavior of the <a class=\"md-crosslink autoxref\" data-show-preview=\"true\" href=\"https://www.britannica.com/money/stock-exchange-finance\">stock market</a>. Since its introduction in 1975, the concept of the fractal has given rise to a new system of <a class=\"md-crosslink autoxref\" data-show-preview=\"true\" href=\"https://www.britannica.com/science/geometry\">geometry</a> that has had a significant impact on such <a class=\"md-dictionary-link md-dictionary-tt-off mw\" data-term=\"diverse\" data-type=\"MW\" href=\"https://www.merriam-webster.com/dictionary/diverse\">diverse</a> fields as <a class=\"md-crosslink autoxref\" data-show-preview=\"true\" href=\"https://www.britannica.com/science/physical-chemistry\">physical chemistry</a>, physiology, and <a class=\"md-crosslink autoxref\" data-show-preview=\"true\" href=\"https://www.britannica.com/science/fluid-mechanics\">fluid mechanics</a>.</p><span class=\"marker MOD2 mod-inline\"></span><span class=\"marker PREMOD3 mod-inline\"></span><p class=\"topic-paragraph\">Many fractals possess the property of <span id=\"ref173797\"></span>self-similarity, at least approximately, if not exactly. A self-similar object is one whose component parts resemble the whole. This reiteration of details or patterns occurs at progressively smaller scales and can, in the case of purely abstract entities, continue indefinitely, so that each part of each part, when magnified, will look basically like a fixed part of the whole object. In effect, a self-similar object remains invariant under changes of scale—i.e., it has scaling <a class=\"md-crosslink autoxref\" data-show-preview=\"true\" href=\"https://www.britannica.com/topic/symmetry-definition\">symmetry</a>. This fractal phenomenon can often be detected in such objects as snowflakes and tree barks. All natural fractals of this kind, as well as some mathematical self-similar ones, are stochastic, or random; they thus scale in a statistical sense.</p><a class=\"link-module shadow-sm d-block qa-quiz-module\" href=\"/quiz/Numbers-and-mathematics\">\n<img alt=\"Equations written on blackboard\" class=\"rounded-sm mr-15\" loading=\"lazy\" src=\"https://cdn.britannica.com/86/94086-131-0BAE374D/Equations-blackboard.jpg\"/>\n<div class=\"line-clamp clamp-5\">\n<p class=\"module-title bg-green\">Britannica Quiz</p>\n<p class=\"font-weight-semi-bold mt-5\">Numbers and Mathematics</p>\n</div>\n</a><span class=\"marker MOD3 mod-inline\"></span><span class=\"marker PREMOD4 mod-inline\"></span><p class=\"topic-paragraph\">Another key characteristic of a fractal is a mathematical <a class=\"md-dictionary-link md-dictionary-tt-off mw\" data-term=\"parameter\" data-type=\"MW\" href=\"https://www.merriam-webster.com/dictionary/parameter\">parameter</a> called its <span id=\"ref173798\"></span><a class=\"md-crosslink\" href=\"https://www.britannica.com/science/fractal-dimension\">fractal dimension</a>. Unlike Euclidean dimension, fractal dimension is generally expressed by a noninteger—that is to say, by a fraction rather than by a <a class=\"md-crosslink autoxref\" data-show-preview=\"true\" href=\"https://www.britannica.com/science/natural-number\">whole number</a>. Fractal dimension can be illustrated by considering a specific example: the <span id=\"ref802824\"></span><a class=\"md-crosslink\" href=\"https://www.britannica.com/science/Von-Kochs-snowflake-curve\">snowflake curv</a>e defined by <span id=\"ref802822\"></span><a class=\"md-crosslink\" data-show-preview=\"true\" href=\"https://www.britannica.com/biography/Niels-Fabian-Helge-von-Koch\">Helge von Koch</a> in 1904. It is a purely mathematical figure with a six-fold symmetry, like a natural snowflake. It is self-similar in that it consists of three identical parts, each of which in turn is made of four parts that are exact scaled-down versions of the whole. It follows that each of the four parts itself consists of four parts that are-scaled down versions of the whole. There would be nothing surprising if the scaling factor were also four, since that would be true of a <a class=\"md-crosslink autoxref\" data-show-preview=\"true\" href=\"https://www.britannica.com/science/line-mathematics\">line</a> segment or a circular arc. However, for the snowflake curve, the scaling factor at each stage is three. The fractal <a class=\"md-dictionary-link md-dictionary-tt-off eb\" data-term=\"dimension\" data-type=\"EB\" href=\"https://www.britannica.com/dictionary/dimension\">dimension</a>, <em>D</em>, denotes the power to which 3 must be raised to produce 4—i.e., 3<sup><em>D</em></sup>= 4. The dimension of the snowflake curve is thus <em>D</em> = <span class=\"md-fraction md-fraction-oblique\"><span><span class=\"md-frac-num\">log 4</span><span class=\"md-fraction-symbol\">/</span><span class=\"md-frac-den\">log 3</span></span></span>, or roughly 1.26. Fractal dimension is a key property and an indicator of the <a class=\"md-crosslink autoxref\" data-show-preview=\"true\" href=\"https://www.britannica.com/science/complexity-scientific-theory\">complexity</a> of a given figure.</p><p class=\"one-good-fact-module\">\n</p><span class=\"marker MOD4 mod-inline\"></span><span class=\"marker PREMOD5 mod-inline\"></span><p class=\"topic-paragraph\">Fractal geometry with its concepts of self-similarity and noninteger dimensionality has been applied increasingly in <span id=\"ref173799\"></span><a class=\"md-crosslink\" data-show-preview=\"true\" href=\"https://www.britannica.com/science/statistical-mechanics\">statistical mechanics</a>, notably when dealing with physical systems consisting of seemingly random features. For example, fractal simulations have been used to plot the distribution of galaxy clusters throughout the universe and to study problems related to fluid turbulence. Fractal geometry also has contributed to <span id=\"ref173800\"></span><a class=\"md-crosslink\" data-show-preview=\"true\" href=\"https://www.britannica.com/topic/computer-graphics\">computer graphics</a>. Fractal <a class=\"md-dictionary-link md-dictionary-tt-off mw\" data-term=\"algorithms\" data-type=\"MW\" href=\"https://www.merriam-webster.com/dictionary/algorithms\">algorithms</a> have made it possible to generate lifelike images of complicated, highly irregular natural objects, such as the rugged terrains of mountains and the intricate branch systems of trees.</p><span class=\"marker MOD5 mod-inline\"></span></section>\n</div></body></html>",
    "summary": "Fractal | Mathematics, Nature & Art | Britannica"
  }
}